// Code generated by protoc-gen-go. DO NOT EDIT.
// source: common.proto

package commonpb

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	descriptor "github.com/golang/protobuf/protoc-gen-go/descriptor"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Deprecated
type ErrorCode int32

const (
	ErrorCode_Success                       ErrorCode = 0
	ErrorCode_UnexpectedError               ErrorCode = 1
	ErrorCode_ConnectFailed                 ErrorCode = 2
	ErrorCode_PermissionDenied              ErrorCode = 3
	ErrorCode_CollectionNotExists           ErrorCode = 4
	ErrorCode_IllegalArgument               ErrorCode = 5
	ErrorCode_IllegalDimension              ErrorCode = 7
	ErrorCode_IllegalIndexType              ErrorCode = 8
	ErrorCode_IllegalCollectionName         ErrorCode = 9
	ErrorCode_IllegalTOPK                   ErrorCode = 10
	ErrorCode_IllegalRowRecord              ErrorCode = 11
	ErrorCode_IllegalVectorID               ErrorCode = 12
	ErrorCode_IllegalSearchResult           ErrorCode = 13
	ErrorCode_FileNotFound                  ErrorCode = 14
	ErrorCode_MetaFailed                    ErrorCode = 15
	ErrorCode_CacheFailed                   ErrorCode = 16
	ErrorCode_CannotCreateFolder            ErrorCode = 17
	ErrorCode_CannotCreateFile              ErrorCode = 18
	ErrorCode_CannotDeleteFolder            ErrorCode = 19
	ErrorCode_CannotDeleteFile              ErrorCode = 20
	ErrorCode_BuildIndexError               ErrorCode = 21
	ErrorCode_IllegalNLIST                  ErrorCode = 22
	ErrorCode_IllegalMetricType             ErrorCode = 23
	ErrorCode_OutOfMemory                   ErrorCode = 24
	ErrorCode_IndexNotExist                 ErrorCode = 25
	ErrorCode_EmptyCollection               ErrorCode = 26
	ErrorCode_UpdateImportTaskFailure       ErrorCode = 27
	ErrorCode_CollectionNameNotFound        ErrorCode = 28
	ErrorCode_CreateCredentialFailure       ErrorCode = 29
	ErrorCode_UpdateCredentialFailure       ErrorCode = 30
	ErrorCode_DeleteCredentialFailure       ErrorCode = 31
	ErrorCode_GetCredentialFailure          ErrorCode = 32
	ErrorCode_ListCredUsersFailure          ErrorCode = 33
	ErrorCode_GetUserFailure                ErrorCode = 34
	ErrorCode_CreateRoleFailure             ErrorCode = 35
	ErrorCode_DropRoleFailure               ErrorCode = 36
	ErrorCode_OperateUserRoleFailure        ErrorCode = 37
	ErrorCode_SelectRoleFailure             ErrorCode = 38
	ErrorCode_SelectUserFailure             ErrorCode = 39
	ErrorCode_SelectResourceFailure         ErrorCode = 40
	ErrorCode_OperatePrivilegeFailure       ErrorCode = 41
	ErrorCode_SelectGrantFailure            ErrorCode = 42
	ErrorCode_RefreshPolicyInfoCacheFailure ErrorCode = 43
	ErrorCode_ListPolicyFailure             ErrorCode = 44
	ErrorCode_NotShardLeader                ErrorCode = 45
	ErrorCode_NoReplicaAvailable            ErrorCode = 46
	ErrorCode_SegmentNotFound               ErrorCode = 47
	ErrorCode_ForceDeny                     ErrorCode = 48
	ErrorCode_RateLimit                     ErrorCode = 49
	ErrorCode_NodeIDNotMatch                ErrorCode = 50
	ErrorCode_UpsertAutoIDTrue              ErrorCode = 51
	ErrorCode_InsufficientMemoryToLoad      ErrorCode = 52
	ErrorCode_MemoryQuotaExhausted          ErrorCode = 53
	ErrorCode_DiskQuotaExhausted            ErrorCode = 54
	ErrorCode_TimeTickLongDelay             ErrorCode = 55
	ErrorCode_NotReadyServe                 ErrorCode = 56
	// Coord is switching from standby mode to active mode
	ErrorCode_NotReadyCoordActivating ErrorCode = 57
	// Service availability.
	// NA: Not Available.
	ErrorCode_DataCoordNA ErrorCode = 100
	// internal error code.
	ErrorCode_DDRequestRace ErrorCode = 1000
)

var ErrorCode_name = map[int32]string{
	0:    "Success",
	1:    "UnexpectedError",
	2:    "ConnectFailed",
	3:    "PermissionDenied",
	4:    "CollectionNotExists",
	5:    "IllegalArgument",
	7:    "IllegalDimension",
	8:    "IllegalIndexType",
	9:    "IllegalCollectionName",
	10:   "IllegalTOPK",
	11:   "IllegalRowRecord",
	12:   "IllegalVectorID",
	13:   "IllegalSearchResult",
	14:   "FileNotFound",
	15:   "MetaFailed",
	16:   "CacheFailed",
	17:   "CannotCreateFolder",
	18:   "CannotCreateFile",
	19:   "CannotDeleteFolder",
	20:   "CannotDeleteFile",
	21:   "BuildIndexError",
	22:   "IllegalNLIST",
	23:   "IllegalMetricType",
	24:   "OutOfMemory",
	25:   "IndexNotExist",
	26:   "EmptyCollection",
	27:   "UpdateImportTaskFailure",
	28:   "CollectionNameNotFound",
	29:   "CreateCredentialFailure",
	30:   "UpdateCredentialFailure",
	31:   "DeleteCredentialFailure",
	32:   "GetCredentialFailure",
	33:   "ListCredUsersFailure",
	34:   "GetUserFailure",
	35:   "CreateRoleFailure",
	36:   "DropRoleFailure",
	37:   "OperateUserRoleFailure",
	38:   "SelectRoleFailure",
	39:   "SelectUserFailure",
	40:   "SelectResourceFailure",
	41:   "OperatePrivilegeFailure",
	42:   "SelectGrantFailure",
	43:   "RefreshPolicyInfoCacheFailure",
	44:   "ListPolicyFailure",
	45:   "NotShardLeader",
	46:   "NoReplicaAvailable",
	47:   "SegmentNotFound",
	48:   "ForceDeny",
	49:   "RateLimit",
	50:   "NodeIDNotMatch",
	51:   "UpsertAutoIDTrue",
	52:   "InsufficientMemoryToLoad",
	53:   "MemoryQuotaExhausted",
	54:   "DiskQuotaExhausted",
	55:   "TimeTickLongDelay",
	56:   "NotReadyServe",
	57:   "NotReadyCoordActivating",
	100:  "DataCoordNA",
	1000: "DDRequestRace",
}

var ErrorCode_value = map[string]int32{
	"Success":                       0,
	"UnexpectedError":               1,
	"ConnectFailed":                 2,
	"PermissionDenied":              3,
	"CollectionNotExists":           4,
	"IllegalArgument":               5,
	"IllegalDimension":              7,
	"IllegalIndexType":              8,
	"IllegalCollectionName":         9,
	"IllegalTOPK":                   10,
	"IllegalRowRecord":              11,
	"IllegalVectorID":               12,
	"IllegalSearchResult":           13,
	"FileNotFound":                  14,
	"MetaFailed":                    15,
	"CacheFailed":                   16,
	"CannotCreateFolder":            17,
	"CannotCreateFile":              18,
	"CannotDeleteFolder":            19,
	"CannotDeleteFile":              20,
	"BuildIndexError":               21,
	"IllegalNLIST":                  22,
	"IllegalMetricType":             23,
	"OutOfMemory":                   24,
	"IndexNotExist":                 25,
	"EmptyCollection":               26,
	"UpdateImportTaskFailure":       27,
	"CollectionNameNotFound":        28,
	"CreateCredentialFailure":       29,
	"UpdateCredentialFailure":       30,
	"DeleteCredentialFailure":       31,
	"GetCredentialFailure":          32,
	"ListCredUsersFailure":          33,
	"GetUserFailure":                34,
	"CreateRoleFailure":             35,
	"DropRoleFailure":               36,
	"OperateUserRoleFailure":        37,
	"SelectRoleFailure":             38,
	"SelectUserFailure":             39,
	"SelectResourceFailure":         40,
	"OperatePrivilegeFailure":       41,
	"SelectGrantFailure":            42,
	"RefreshPolicyInfoCacheFailure": 43,
	"ListPolicyFailure":             44,
	"NotShardLeader":                45,
	"NoReplicaAvailable":            46,
	"SegmentNotFound":               47,
	"ForceDeny":                     48,
	"RateLimit":                     49,
	"NodeIDNotMatch":                50,
	"UpsertAutoIDTrue":              51,
	"InsufficientMemoryToLoad":      52,
	"MemoryQuotaExhausted":          53,
	"DiskQuotaExhausted":            54,
	"TimeTickLongDelay":             55,
	"NotReadyServe":                 56,
	"NotReadyCoordActivating":       57,
	"DataCoordNA":                   100,
	"DDRequestRace":                 1000,
}

func (x ErrorCode) String() string {
	return proto.EnumName(ErrorCode_name, int32(x))
}

func (ErrorCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{0}
}

type IndexState int32

const (
	IndexState_IndexStateNone IndexState = 0
	IndexState_Unissued       IndexState = 1
	IndexState_InProgress     IndexState = 2
	IndexState_Finished       IndexState = 3
	IndexState_Failed         IndexState = 4
	IndexState_Retry          IndexState = 5
)

var IndexState_name = map[int32]string{
	0: "IndexStateNone",
	1: "Unissued",
	2: "InProgress",
	3: "Finished",
	4: "Failed",
	5: "Retry",
}

var IndexState_value = map[string]int32{
	"IndexStateNone": 0,
	"Unissued":       1,
	"InProgress":     2,
	"Finished":       3,
	"Failed":         4,
	"Retry":          5,
}

func (x IndexState) String() string {
	return proto.EnumName(IndexState_name, int32(x))
}

func (IndexState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{1}
}

type SegmentState int32

const (
	SegmentState_SegmentStateNone SegmentState = 0
	SegmentState_NotExist         SegmentState = 1
	SegmentState_Growing          SegmentState = 2
	SegmentState_Sealed           SegmentState = 3
	SegmentState_Flushed          SegmentState = 4
	SegmentState_Flushing         SegmentState = 5
	SegmentState_Dropped          SegmentState = 6
	SegmentState_Importing        SegmentState = 7
)

var SegmentState_name = map[int32]string{
	0: "SegmentStateNone",
	1: "NotExist",
	2: "Growing",
	3: "Sealed",
	4: "Flushed",
	5: "Flushing",
	6: "Dropped",
	7: "Importing",
}

var SegmentState_value = map[string]int32{
	"SegmentStateNone": 0,
	"NotExist":         1,
	"Growing":          2,
	"Sealed":           3,
	"Flushed":          4,
	"Flushing":         5,
	"Dropped":          6,
	"Importing":        7,
}

func (x SegmentState) String() string {
	return proto.EnumName(SegmentState_name, int32(x))
}

func (SegmentState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{2}
}

type PlaceholderType int32

const (
	PlaceholderType_None         PlaceholderType = 0
	PlaceholderType_BinaryVector PlaceholderType = 100
	PlaceholderType_FloatVector  PlaceholderType = 101
)

var PlaceholderType_name = map[int32]string{
	0:   "None",
	100: "BinaryVector",
	101: "FloatVector",
}

var PlaceholderType_value = map[string]int32{
	"None":         0,
	"BinaryVector": 100,
	"FloatVector":  101,
}

func (x PlaceholderType) String() string {
	return proto.EnumName(PlaceholderType_name, int32(x))
}

func (PlaceholderType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{3}
}

type MsgType int32

const (
	MsgType_Undefined MsgType = 0
	// DEFINITION REQUESTS: COLLECTION
	MsgType_CreateCollection   MsgType = 100
	MsgType_DropCollection     MsgType = 101
	MsgType_HasCollection      MsgType = 102
	MsgType_DescribeCollection MsgType = 103
	MsgType_ShowCollections    MsgType = 104
	MsgType_GetSystemConfigs   MsgType = 105
	MsgType_LoadCollection     MsgType = 106
	MsgType_ReleaseCollection  MsgType = 107
	MsgType_CreateAlias        MsgType = 108
	MsgType_DropAlias          MsgType = 109
	MsgType_AlterAlias         MsgType = 110
	MsgType_AlterCollection    MsgType = 111
	MsgType_RenameCollection   MsgType = 112
	MsgType_DescribeAlias      MsgType = 113
	MsgType_ListAliases        MsgType = 114
	// DEFINITION REQUESTS: PARTITION
	MsgType_CreatePartition   MsgType = 200
	MsgType_DropPartition     MsgType = 201
	MsgType_HasPartition      MsgType = 202
	MsgType_DescribePartition MsgType = 203
	MsgType_ShowPartitions    MsgType = 204
	MsgType_LoadPartitions    MsgType = 205
	MsgType_ReleasePartitions MsgType = 206
	// DEFINE REQUESTS: SEGMENT
	MsgType_ShowSegments                  MsgType = 250
	MsgType_DescribeSegment               MsgType = 251
	MsgType_LoadSegments                  MsgType = 252
	MsgType_ReleaseSegments               MsgType = 253
	MsgType_HandoffSegments               MsgType = 254
	MsgType_LoadBalanceSegments           MsgType = 255
	MsgType_DescribeSegments              MsgType = 256
	MsgType_FederListIndexedSegment       MsgType = 257
	MsgType_FederDescribeSegmentIndexData MsgType = 258
	// DEFINITION REQUESTS: INDEX
	MsgType_CreateIndex   MsgType = 300
	MsgType_DescribeIndex MsgType = 301
	MsgType_DropIndex     MsgType = 302
	// MANIPULATION REQUESTS
	MsgType_Insert             MsgType = 400
	MsgType_Delete             MsgType = 401
	MsgType_Flush              MsgType = 402
	MsgType_ResendSegmentStats MsgType = 403
	MsgType_Upsert             MsgType = 404
	// QUERY
	MsgType_Search                   MsgType = 500
	MsgType_SearchResult             MsgType = 501
	MsgType_GetIndexState            MsgType = 502
	MsgType_GetIndexBuildProgress    MsgType = 503
	MsgType_GetCollectionStatistics  MsgType = 504
	MsgType_GetPartitionStatistics   MsgType = 505
	MsgType_Retrieve                 MsgType = 506
	MsgType_RetrieveResult           MsgType = 507
	MsgType_WatchDmChannels          MsgType = 508
	MsgType_RemoveDmChannels         MsgType = 509
	MsgType_WatchQueryChannels       MsgType = 510
	MsgType_RemoveQueryChannels      MsgType = 511
	MsgType_SealedSegmentsChangeInfo MsgType = 512
	MsgType_WatchDeltaChannels       MsgType = 513
	MsgType_GetShardLeaders          MsgType = 514
	MsgType_GetReplicas              MsgType = 515
	MsgType_UnsubDmChannel           MsgType = 516
	MsgType_GetDistribution          MsgType = 517
	MsgType_SyncDistribution         MsgType = 518
	// DATA SERVICE
	MsgType_SegmentInfo     MsgType = 600
	MsgType_SystemInfo      MsgType = 601
	MsgType_GetRecoveryInfo MsgType = 602
	MsgType_GetSegmentState MsgType = 603
	// SYSTEM CONTROL
	MsgType_TimeTick          MsgType = 1200
	MsgType_QueryNodeStats    MsgType = 1201
	MsgType_LoadIndex         MsgType = 1202
	MsgType_RequestID         MsgType = 1203
	MsgType_RequestTSO        MsgType = 1204
	MsgType_AllocateSegment   MsgType = 1205
	MsgType_SegmentStatistics MsgType = 1206
	MsgType_SegmentFlushDone  MsgType = 1207
	MsgType_DataNodeTt        MsgType = 1208
	// Credential
	MsgType_CreateCredential  MsgType = 1500
	MsgType_GetCredential     MsgType = 1501
	MsgType_DeleteCredential  MsgType = 1502
	MsgType_UpdateCredential  MsgType = 1503
	MsgType_ListCredUsernames MsgType = 1504
	// RBAC
	MsgType_CreateRole             MsgType = 1600
	MsgType_DropRole               MsgType = 1601
	MsgType_OperateUserRole        MsgType = 1602
	MsgType_SelectRole             MsgType = 1603
	MsgType_SelectUser             MsgType = 1604
	MsgType_SelectResource         MsgType = 1605
	MsgType_OperatePrivilege       MsgType = 1606
	MsgType_SelectGrant            MsgType = 1607
	MsgType_RefreshPolicyInfoCache MsgType = 1608
	MsgType_ListPolicy             MsgType = 1609
	// Resource group
	MsgType_CreateResourceGroup   MsgType = 1700
	MsgType_DropResourceGroup     MsgType = 1701
	MsgType_ListResourceGroups    MsgType = 1702
	MsgType_DescribeResourceGroup MsgType = 1703
	MsgType_TransferNode          MsgType = 1704
	MsgType_TransferReplica       MsgType = 1705
)

var MsgType_name = map[int32]string{
	0:    "Undefined",
	100:  "CreateCollection",
	101:  "DropCollection",
	102:  "HasCollection",
	103:  "DescribeCollection",
	104:  "ShowCollections",
	105:  "GetSystemConfigs",
	106:  "LoadCollection",
	107:  "ReleaseCollection",
	108:  "CreateAlias",
	109:  "DropAlias",
	110:  "AlterAlias",
	111:  "AlterCollection",
	112:  "RenameCollection",
	113:  "DescribeAlias",
	114:  "ListAliases",
	200:  "CreatePartition",
	201:  "DropPartition",
	202:  "HasPartition",
	203:  "DescribePartition",
	204:  "ShowPartitions",
	205:  "LoadPartitions",
	206:  "ReleasePartitions",
	250:  "ShowSegments",
	251:  "DescribeSegment",
	252:  "LoadSegments",
	253:  "ReleaseSegments",
	254:  "HandoffSegments",
	255:  "LoadBalanceSegments",
	256:  "DescribeSegments",
	257:  "FederListIndexedSegment",
	258:  "FederDescribeSegmentIndexData",
	300:  "CreateIndex",
	301:  "DescribeIndex",
	302:  "DropIndex",
	400:  "Insert",
	401:  "Delete",
	402:  "Flush",
	403:  "ResendSegmentStats",
	404:  "Upsert",
	500:  "Search",
	501:  "SearchResult",
	502:  "GetIndexState",
	503:  "GetIndexBuildProgress",
	504:  "GetCollectionStatistics",
	505:  "GetPartitionStatistics",
	506:  "Retrieve",
	507:  "RetrieveResult",
	508:  "WatchDmChannels",
	509:  "RemoveDmChannels",
	510:  "WatchQueryChannels",
	511:  "RemoveQueryChannels",
	512:  "SealedSegmentsChangeInfo",
	513:  "WatchDeltaChannels",
	514:  "GetShardLeaders",
	515:  "GetReplicas",
	516:  "UnsubDmChannel",
	517:  "GetDistribution",
	518:  "SyncDistribution",
	600:  "SegmentInfo",
	601:  "SystemInfo",
	602:  "GetRecoveryInfo",
	603:  "GetSegmentState",
	1200: "TimeTick",
	1201: "QueryNodeStats",
	1202: "LoadIndex",
	1203: "RequestID",
	1204: "RequestTSO",
	1205: "AllocateSegment",
	1206: "SegmentStatistics",
	1207: "SegmentFlushDone",
	1208: "DataNodeTt",
	1500: "CreateCredential",
	1501: "GetCredential",
	1502: "DeleteCredential",
	1503: "UpdateCredential",
	1504: "ListCredUsernames",
	1600: "CreateRole",
	1601: "DropRole",
	1602: "OperateUserRole",
	1603: "SelectRole",
	1604: "SelectUser",
	1605: "SelectResource",
	1606: "OperatePrivilege",
	1607: "SelectGrant",
	1608: "RefreshPolicyInfoCache",
	1609: "ListPolicy",
	1700: "CreateResourceGroup",
	1701: "DropResourceGroup",
	1702: "ListResourceGroups",
	1703: "DescribeResourceGroup",
	1704: "TransferNode",
	1705: "TransferReplica",
}

var MsgType_value = map[string]int32{
	"Undefined":                     0,
	"CreateCollection":              100,
	"DropCollection":                101,
	"HasCollection":                 102,
	"DescribeCollection":            103,
	"ShowCollections":               104,
	"GetSystemConfigs":              105,
	"LoadCollection":                106,
	"ReleaseCollection":             107,
	"CreateAlias":                   108,
	"DropAlias":                     109,
	"AlterAlias":                    110,
	"AlterCollection":               111,
	"RenameCollection":              112,
	"DescribeAlias":                 113,
	"ListAliases":                   114,
	"CreatePartition":               200,
	"DropPartition":                 201,
	"HasPartition":                  202,
	"DescribePartition":             203,
	"ShowPartitions":                204,
	"LoadPartitions":                205,
	"ReleasePartitions":             206,
	"ShowSegments":                  250,
	"DescribeSegment":               251,
	"LoadSegments":                  252,
	"ReleaseSegments":               253,
	"HandoffSegments":               254,
	"LoadBalanceSegments":           255,
	"DescribeSegments":              256,
	"FederListIndexedSegment":       257,
	"FederDescribeSegmentIndexData": 258,
	"CreateIndex":                   300,
	"DescribeIndex":                 301,
	"DropIndex":                     302,
	"Insert":                        400,
	"Delete":                        401,
	"Flush":                         402,
	"ResendSegmentStats":            403,
	"Upsert":                        404,
	"Search":                        500,
	"SearchResult":                  501,
	"GetIndexState":                 502,
	"GetIndexBuildProgress":         503,
	"GetCollectionStatistics":       504,
	"GetPartitionStatistics":        505,
	"Retrieve":                      506,
	"RetrieveResult":                507,
	"WatchDmChannels":               508,
	"RemoveDmChannels":              509,
	"WatchQueryChannels":            510,
	"RemoveQueryChannels":           511,
	"SealedSegmentsChangeInfo":      512,
	"WatchDeltaChannels":            513,
	"GetShardLeaders":               514,
	"GetReplicas":                   515,
	"UnsubDmChannel":                516,
	"GetDistribution":               517,
	"SyncDistribution":              518,
	"SegmentInfo":                   600,
	"SystemInfo":                    601,
	"GetRecoveryInfo":               602,
	"GetSegmentState":               603,
	"TimeTick":                      1200,
	"QueryNodeStats":                1201,
	"LoadIndex":                     1202,
	"RequestID":                     1203,
	"RequestTSO":                    1204,
	"AllocateSegment":               1205,
	"SegmentStatistics":             1206,
	"SegmentFlushDone":              1207,
	"DataNodeTt":                    1208,
	"CreateCredential":              1500,
	"GetCredential":                 1501,
	"DeleteCredential":              1502,
	"UpdateCredential":              1503,
	"ListCredUsernames":             1504,
	"CreateRole":                    1600,
	"DropRole":                      1601,
	"OperateUserRole":               1602,
	"SelectRole":                    1603,
	"SelectUser":                    1604,
	"SelectResource":                1605,
	"OperatePrivilege":              1606,
	"SelectGrant":                   1607,
	"RefreshPolicyInfoCache":        1608,
	"ListPolicy":                    1609,
	"CreateResourceGroup":           1700,
	"DropResourceGroup":             1701,
	"ListResourceGroups":            1702,
	"DescribeResourceGroup":         1703,
	"TransferNode":                  1704,
	"TransferReplica":               1705,
}

func (x MsgType) String() string {
	return proto.EnumName(MsgType_name, int32(x))
}

func (MsgType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{4}
}

type DslType int32

const (
	DslType_Dsl        DslType = 0
	DslType_BoolExprV1 DslType = 1
)

var DslType_name = map[int32]string{
	0: "Dsl",
	1: "BoolExprV1",
}

var DslType_value = map[string]int32{
	"Dsl":        0,
	"BoolExprV1": 1,
}

func (x DslType) String() string {
	return proto.EnumName(DslType_name, int32(x))
}

func (DslType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{5}
}

type CompactionState int32

const (
	CompactionState_UndefiedState CompactionState = 0
	CompactionState_Executing     CompactionState = 1
	CompactionState_Completed     CompactionState = 2
)

var CompactionState_name = map[int32]string{
	0: "UndefiedState",
	1: "Executing",
	2: "Completed",
}

var CompactionState_value = map[string]int32{
	"UndefiedState": 0,
	"Executing":     1,
	"Completed":     2,
}

func (x CompactionState) String() string {
	return proto.EnumName(CompactionState_name, int32(x))
}

func (CompactionState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{6}
}

type ConsistencyLevel int32

const (
	ConsistencyLevel_Strong     ConsistencyLevel = 0
	ConsistencyLevel_Session    ConsistencyLevel = 1
	ConsistencyLevel_Bounded    ConsistencyLevel = 2
	ConsistencyLevel_Eventually ConsistencyLevel = 3
	ConsistencyLevel_Customized ConsistencyLevel = 4
)

var ConsistencyLevel_name = map[int32]string{
	0: "Strong",
	1: "Session",
	2: "Bounded",
	3: "Eventually",
	4: "Customized",
}

var ConsistencyLevel_value = map[string]int32{
	"Strong":     0,
	"Session":    1,
	"Bounded":    2,
	"Eventually": 3,
	"Customized": 4,
}

func (x ConsistencyLevel) String() string {
	return proto.EnumName(ConsistencyLevel_name, int32(x))
}

func (ConsistencyLevel) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{7}
}

type ImportState int32

const (
	ImportState_ImportPending          ImportState = 0
	ImportState_ImportFailed           ImportState = 1
	ImportState_ImportStarted          ImportState = 2
	ImportState_ImportPersisted        ImportState = 5
	ImportState_ImportFlushed          ImportState = 8
	ImportState_ImportCompleted        ImportState = 6
	ImportState_ImportFailedAndCleaned ImportState = 7
)

var ImportState_name = map[int32]string{
	0: "ImportPending",
	1: "ImportFailed",
	2: "ImportStarted",
	5: "ImportPersisted",
	8: "ImportFlushed",
	6: "ImportCompleted",
	7: "ImportFailedAndCleaned",
}

var ImportState_value = map[string]int32{
	"ImportPending":          0,
	"ImportFailed":           1,
	"ImportStarted":          2,
	"ImportPersisted":        5,
	"ImportFlushed":          8,
	"ImportCompleted":        6,
	"ImportFailedAndCleaned": 7,
}

func (x ImportState) String() string {
	return proto.EnumName(ImportState_name, int32(x))
}

func (ImportState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{8}
}

type ObjectType int32

const (
	ObjectType_Collection ObjectType = 0
	ObjectType_Global     ObjectType = 1
	ObjectType_User       ObjectType = 2
)

var ObjectType_name = map[int32]string{
	0: "Collection",
	1: "Global",
	2: "User",
}

var ObjectType_value = map[string]int32{
	"Collection": 0,
	"Global":     1,
	"User":       2,
}

func (x ObjectType) String() string {
	return proto.EnumName(ObjectType_name, int32(x))
}

func (ObjectType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{9}
}

type ObjectPrivilege int32

const (
	ObjectPrivilege_PrivilegeAll                   ObjectPrivilege = 0
	ObjectPrivilege_PrivilegeCreateCollection      ObjectPrivilege = 1
	ObjectPrivilege_PrivilegeDropCollection        ObjectPrivilege = 2
	ObjectPrivilege_PrivilegeDescribeCollection    ObjectPrivilege = 3
	ObjectPrivilege_PrivilegeShowCollections       ObjectPrivilege = 4
	ObjectPrivilege_PrivilegeLoad                  ObjectPrivilege = 5
	ObjectPrivilege_PrivilegeRelease               ObjectPrivilege = 6
	ObjectPrivilege_PrivilegeCompaction            ObjectPrivilege = 7
	ObjectPrivilege_PrivilegeInsert                ObjectPrivilege = 8
	ObjectPrivilege_PrivilegeDelete                ObjectPrivilege = 9
	ObjectPrivilege_PrivilegeGetStatistics         ObjectPrivilege = 10
	ObjectPrivilege_PrivilegeCreateIndex           ObjectPrivilege = 11
	ObjectPrivilege_PrivilegeIndexDetail           ObjectPrivilege = 12
	ObjectPrivilege_PrivilegeDropIndex             ObjectPrivilege = 13
	ObjectPrivilege_PrivilegeSearch                ObjectPrivilege = 14
	ObjectPrivilege_PrivilegeFlush                 ObjectPrivilege = 15
	ObjectPrivilege_PrivilegeQuery                 ObjectPrivilege = 16
	ObjectPrivilege_PrivilegeLoadBalance           ObjectPrivilege = 17
	ObjectPrivilege_PrivilegeImport                ObjectPrivilege = 18
	ObjectPrivilege_PrivilegeCreateOwnership       ObjectPrivilege = 19
	ObjectPrivilege_PrivilegeUpdateUser            ObjectPrivilege = 20
	ObjectPrivilege_PrivilegeDropOwnership         ObjectPrivilege = 21
	ObjectPrivilege_PrivilegeSelectOwnership       ObjectPrivilege = 22
	ObjectPrivilege_PrivilegeManageOwnership       ObjectPrivilege = 23
	ObjectPrivilege_PrivilegeSelectUser            ObjectPrivilege = 24
	ObjectPrivilege_PrivilegeUpsert                ObjectPrivilege = 25
	ObjectPrivilege_PrivilegeCreateResourceGroup   ObjectPrivilege = 26
	ObjectPrivilege_PrivilegeDropResourceGroup     ObjectPrivilege = 27
	ObjectPrivilege_PrivilegeDescribeResourceGroup ObjectPrivilege = 28
	ObjectPrivilege_PrivilegeListResourceGroups    ObjectPrivilege = 29
	ObjectPrivilege_PrivilegeTransferNode          ObjectPrivilege = 30
	ObjectPrivilege_PrivilegeTransferReplica       ObjectPrivilege = 31
	ObjectPrivilege_PrivilegeGetLoadingProgress    ObjectPrivilege = 32
	ObjectPrivilege_PrivilegeGetLoadState          ObjectPrivilege = 33
)

var ObjectPrivilege_name = map[int32]string{
	0:  "PrivilegeAll",
	1:  "PrivilegeCreateCollection",
	2:  "PrivilegeDropCollection",
	3:  "PrivilegeDescribeCollection",
	4:  "PrivilegeShowCollections",
	5:  "PrivilegeLoad",
	6:  "PrivilegeRelease",
	7:  "PrivilegeCompaction",
	8:  "PrivilegeInsert",
	9:  "PrivilegeDelete",
	10: "PrivilegeGetStatistics",
	11: "PrivilegeCreateIndex",
	12: "PrivilegeIndexDetail",
	13: "PrivilegeDropIndex",
	14: "PrivilegeSearch",
	15: "PrivilegeFlush",
	16: "PrivilegeQuery",
	17: "PrivilegeLoadBalance",
	18: "PrivilegeImport",
	19: "PrivilegeCreateOwnership",
	20: "PrivilegeUpdateUser",
	21: "PrivilegeDropOwnership",
	22: "PrivilegeSelectOwnership",
	23: "PrivilegeManageOwnership",
	24: "PrivilegeSelectUser",
	25: "PrivilegeUpsert",
	26: "PrivilegeCreateResourceGroup",
	27: "PrivilegeDropResourceGroup",
	28: "PrivilegeDescribeResourceGroup",
	29: "PrivilegeListResourceGroups",
	30: "PrivilegeTransferNode",
	31: "PrivilegeTransferReplica",
	32: "PrivilegeGetLoadingProgress",
	33: "PrivilegeGetLoadState",
}

var ObjectPrivilege_value = map[string]int32{
	"PrivilegeAll":                   0,
	"PrivilegeCreateCollection":      1,
	"PrivilegeDropCollection":        2,
	"PrivilegeDescribeCollection":    3,
	"PrivilegeShowCollections":       4,
	"PrivilegeLoad":                  5,
	"PrivilegeRelease":               6,
	"PrivilegeCompaction":            7,
	"PrivilegeInsert":                8,
	"PrivilegeDelete":                9,
	"PrivilegeGetStatistics":         10,
	"PrivilegeCreateIndex":           11,
	"PrivilegeIndexDetail":           12,
	"PrivilegeDropIndex":             13,
	"PrivilegeSearch":                14,
	"PrivilegeFlush":                 15,
	"PrivilegeQuery":                 16,
	"PrivilegeLoadBalance":           17,
	"PrivilegeImport":                18,
	"PrivilegeCreateOwnership":       19,
	"PrivilegeUpdateUser":            20,
	"PrivilegeDropOwnership":         21,
	"PrivilegeSelectOwnership":       22,
	"PrivilegeManageOwnership":       23,
	"PrivilegeSelectUser":            24,
	"PrivilegeUpsert":                25,
	"PrivilegeCreateResourceGroup":   26,
	"PrivilegeDropResourceGroup":     27,
	"PrivilegeDescribeResourceGroup": 28,
	"PrivilegeListResourceGroups":    29,
	"PrivilegeTransferNode":          30,
	"PrivilegeTransferReplica":       31,
	"PrivilegeGetLoadingProgress":    32,
	"PrivilegeGetLoadState":          33,
}

func (x ObjectPrivilege) String() string {
	return proto.EnumName(ObjectPrivilege_name, int32(x))
}

func (ObjectPrivilege) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{10}
}

type StateCode int32

const (
	StateCode_Initializing StateCode = 0
	StateCode_Healthy      StateCode = 1
	StateCode_Abnormal     StateCode = 2
	StateCode_StandBy      StateCode = 3
	StateCode_Stopping     StateCode = 4
)

var StateCode_name = map[int32]string{
	0: "Initializing",
	1: "Healthy",
	2: "Abnormal",
	3: "StandBy",
	4: "Stopping",
}

var StateCode_value = map[string]int32{
	"Initializing": 0,
	"Healthy":      1,
	"Abnormal":     2,
	"StandBy":      3,
	"Stopping":     4,
}

func (x StateCode) String() string {
	return proto.EnumName(StateCode_name, int32(x))
}

func (StateCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{11}
}

type LoadState int32

const (
	LoadState_LoadStateNotExist LoadState = 0
	LoadState_LoadStateNotLoad  LoadState = 1
	LoadState_LoadStateLoading  LoadState = 2
	LoadState_LoadStateLoaded   LoadState = 3
)

var LoadState_name = map[int32]string{
	0: "LoadStateNotExist",
	1: "LoadStateNotLoad",
	2: "LoadStateLoading",
	3: "LoadStateLoaded",
}

var LoadState_value = map[string]int32{
	"LoadStateNotExist": 0,
	"LoadStateNotLoad":  1,
	"LoadStateLoading":  2,
	"LoadStateLoaded":   3,
}

func (x LoadState) String() string {
	return proto.EnumName(LoadState_name, int32(x))
}

func (LoadState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{12}
}

type Status struct {
	ErrorCode            ErrorCode `protobuf:"varint,1,opt,name=error_code,json=errorCode,proto3,enum=milvus.proto.common.ErrorCode" json:"error_code,omitempty"`
	Reason               string    `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`
	Code                 int32     `protobuf:"varint,3,opt,name=code,proto3" json:"code,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *Status) Reset()         { *m = Status{} }
func (m *Status) String() string { return proto.CompactTextString(m) }
func (*Status) ProtoMessage()    {}
func (*Status) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{0}
}

func (m *Status) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Status.Unmarshal(m, b)
}
func (m *Status) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Status.Marshal(b, m, deterministic)
}
func (m *Status) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Status.Merge(m, src)
}
func (m *Status) XXX_Size() int {
	return xxx_messageInfo_Status.Size(m)
}
func (m *Status) XXX_DiscardUnknown() {
	xxx_messageInfo_Status.DiscardUnknown(m)
}

var xxx_messageInfo_Status proto.InternalMessageInfo

func (m *Status) GetErrorCode() ErrorCode {
	if m != nil {
		return m.ErrorCode
	}
	return ErrorCode_Success
}

func (m *Status) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

func (m *Status) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

type KeyValuePair struct {
	Key                  string   `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value                string   `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *KeyValuePair) Reset()         { *m = KeyValuePair{} }
func (m *KeyValuePair) String() string { return proto.CompactTextString(m) }
func (*KeyValuePair) ProtoMessage()    {}
func (*KeyValuePair) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{1}
}

func (m *KeyValuePair) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_KeyValuePair.Unmarshal(m, b)
}
func (m *KeyValuePair) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_KeyValuePair.Marshal(b, m, deterministic)
}
func (m *KeyValuePair) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KeyValuePair.Merge(m, src)
}
func (m *KeyValuePair) XXX_Size() int {
	return xxx_messageInfo_KeyValuePair.Size(m)
}
func (m *KeyValuePair) XXX_DiscardUnknown() {
	xxx_messageInfo_KeyValuePair.DiscardUnknown(m)
}

var xxx_messageInfo_KeyValuePair proto.InternalMessageInfo

func (m *KeyValuePair) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *KeyValuePair) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

type KeyDataPair struct {
	Key                  string   `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Data                 []byte   `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *KeyDataPair) Reset()         { *m = KeyDataPair{} }
func (m *KeyDataPair) String() string { return proto.CompactTextString(m) }
func (*KeyDataPair) ProtoMessage()    {}
func (*KeyDataPair) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{2}
}

func (m *KeyDataPair) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_KeyDataPair.Unmarshal(m, b)
}
func (m *KeyDataPair) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_KeyDataPair.Marshal(b, m, deterministic)
}
func (m *KeyDataPair) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KeyDataPair.Merge(m, src)
}
func (m *KeyDataPair) XXX_Size() int {
	return xxx_messageInfo_KeyDataPair.Size(m)
}
func (m *KeyDataPair) XXX_DiscardUnknown() {
	xxx_messageInfo_KeyDataPair.DiscardUnknown(m)
}

var xxx_messageInfo_KeyDataPair proto.InternalMessageInfo

func (m *KeyDataPair) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *KeyDataPair) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type Blob struct {
	Value                []byte   `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Blob) Reset()         { *m = Blob{} }
func (m *Blob) String() string { return proto.CompactTextString(m) }
func (*Blob) ProtoMessage()    {}
func (*Blob) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{3}
}

func (m *Blob) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Blob.Unmarshal(m, b)
}
func (m *Blob) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Blob.Marshal(b, m, deterministic)
}
func (m *Blob) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Blob.Merge(m, src)
}
func (m *Blob) XXX_Size() int {
	return xxx_messageInfo_Blob.Size(m)
}
func (m *Blob) XXX_DiscardUnknown() {
	xxx_messageInfo_Blob.DiscardUnknown(m)
}

var xxx_messageInfo_Blob proto.InternalMessageInfo

func (m *Blob) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

type PlaceholderValue struct {
	Tag  string          `protobuf:"bytes,1,opt,name=tag,proto3" json:"tag,omitempty"`
	Type PlaceholderType `protobuf:"varint,2,opt,name=type,proto3,enum=milvus.proto.common.PlaceholderType" json:"type,omitempty"`
	// values is a 2d-array, every array contains a vector
	Values               [][]byte `protobuf:"bytes,3,rep,name=values,proto3" json:"values,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PlaceholderValue) Reset()         { *m = PlaceholderValue{} }
func (m *PlaceholderValue) String() string { return proto.CompactTextString(m) }
func (*PlaceholderValue) ProtoMessage()    {}
func (*PlaceholderValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{4}
}

func (m *PlaceholderValue) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PlaceholderValue.Unmarshal(m, b)
}
func (m *PlaceholderValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PlaceholderValue.Marshal(b, m, deterministic)
}
func (m *PlaceholderValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlaceholderValue.Merge(m, src)
}
func (m *PlaceholderValue) XXX_Size() int {
	return xxx_messageInfo_PlaceholderValue.Size(m)
}
func (m *PlaceholderValue) XXX_DiscardUnknown() {
	xxx_messageInfo_PlaceholderValue.DiscardUnknown(m)
}

var xxx_messageInfo_PlaceholderValue proto.InternalMessageInfo

func (m *PlaceholderValue) GetTag() string {
	if m != nil {
		return m.Tag
	}
	return ""
}

func (m *PlaceholderValue) GetType() PlaceholderType {
	if m != nil {
		return m.Type
	}
	return PlaceholderType_None
}

func (m *PlaceholderValue) GetValues() [][]byte {
	if m != nil {
		return m.Values
	}
	return nil
}

type PlaceholderGroup struct {
	Placeholders         []*PlaceholderValue `protobuf:"bytes,1,rep,name=placeholders,proto3" json:"placeholders,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *PlaceholderGroup) Reset()         { *m = PlaceholderGroup{} }
func (m *PlaceholderGroup) String() string { return proto.CompactTextString(m) }
func (*PlaceholderGroup) ProtoMessage()    {}
func (*PlaceholderGroup) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{5}
}

func (m *PlaceholderGroup) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PlaceholderGroup.Unmarshal(m, b)
}
func (m *PlaceholderGroup) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PlaceholderGroup.Marshal(b, m, deterministic)
}
func (m *PlaceholderGroup) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlaceholderGroup.Merge(m, src)
}
func (m *PlaceholderGroup) XXX_Size() int {
	return xxx_messageInfo_PlaceholderGroup.Size(m)
}
func (m *PlaceholderGroup) XXX_DiscardUnknown() {
	xxx_messageInfo_PlaceholderGroup.DiscardUnknown(m)
}

var xxx_messageInfo_PlaceholderGroup proto.InternalMessageInfo

func (m *PlaceholderGroup) GetPlaceholders() []*PlaceholderValue {
	if m != nil {
		return m.Placeholders
	}
	return nil
}

type Address struct {
	Ip                   string   `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	Port                 int64    `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Address) Reset()         { *m = Address{} }
func (m *Address) String() string { return proto.CompactTextString(m) }
func (*Address) ProtoMessage()    {}
func (*Address) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{6}
}

func (m *Address) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Address.Unmarshal(m, b)
}
func (m *Address) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Address.Marshal(b, m, deterministic)
}
func (m *Address) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Address.Merge(m, src)
}
func (m *Address) XXX_Size() int {
	return xxx_messageInfo_Address.Size(m)
}
func (m *Address) XXX_DiscardUnknown() {
	xxx_messageInfo_Address.DiscardUnknown(m)
}

var xxx_messageInfo_Address proto.InternalMessageInfo

func (m *Address) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *Address) GetPort() int64 {
	if m != nil {
		return m.Port
	}
	return 0
}

type MsgBase struct {
	MsgType              MsgType  `protobuf:"varint,1,opt,name=msg_type,json=msgType,proto3,enum=milvus.proto.common.MsgType" json:"msg_type,omitempty"`
	MsgID                int64    `protobuf:"varint,2,opt,name=msgID,proto3" json:"msgID,omitempty"`
	Timestamp            uint64   `protobuf:"varint,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	SourceID             int64    `protobuf:"varint,4,opt,name=sourceID,proto3" json:"sourceID,omitempty"`
	TargetID             int64    `protobuf:"varint,5,opt,name=targetID,proto3" json:"targetID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MsgBase) Reset()         { *m = MsgBase{} }
func (m *MsgBase) String() string { return proto.CompactTextString(m) }
func (*MsgBase) ProtoMessage()    {}
func (*MsgBase) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{7}
}

func (m *MsgBase) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MsgBase.Unmarshal(m, b)
}
func (m *MsgBase) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MsgBase.Marshal(b, m, deterministic)
}
func (m *MsgBase) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgBase.Merge(m, src)
}
func (m *MsgBase) XXX_Size() int {
	return xxx_messageInfo_MsgBase.Size(m)
}
func (m *MsgBase) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgBase.DiscardUnknown(m)
}

var xxx_messageInfo_MsgBase proto.InternalMessageInfo

func (m *MsgBase) GetMsgType() MsgType {
	if m != nil {
		return m.MsgType
	}
	return MsgType_Undefined
}

func (m *MsgBase) GetMsgID() int64 {
	if m != nil {
		return m.MsgID
	}
	return 0
}

func (m *MsgBase) GetTimestamp() uint64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *MsgBase) GetSourceID() int64 {
	if m != nil {
		return m.SourceID
	}
	return 0
}

func (m *MsgBase) GetTargetID() int64 {
	if m != nil {
		return m.TargetID
	}
	return 0
}

// Don't Modify This. @czs
type MsgHeader struct {
	Base                 *MsgBase `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MsgHeader) Reset()         { *m = MsgHeader{} }
func (m *MsgHeader) String() string { return proto.CompactTextString(m) }
func (*MsgHeader) ProtoMessage()    {}
func (*MsgHeader) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{8}
}

func (m *MsgHeader) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MsgHeader.Unmarshal(m, b)
}
func (m *MsgHeader) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MsgHeader.Marshal(b, m, deterministic)
}
func (m *MsgHeader) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgHeader.Merge(m, src)
}
func (m *MsgHeader) XXX_Size() int {
	return xxx_messageInfo_MsgHeader.Size(m)
}
func (m *MsgHeader) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgHeader.DiscardUnknown(m)
}

var xxx_messageInfo_MsgHeader proto.InternalMessageInfo

func (m *MsgHeader) GetBase() *MsgBase {
	if m != nil {
		return m.Base
	}
	return nil
}

// Don't Modify This. @czs
type DMLMsgHeader struct {
	Base                 *MsgBase `protobuf:"bytes,1,opt,name=base,proto3" json:"base,omitempty"`
	ShardName            string   `protobuf:"bytes,2,opt,name=shardName,proto3" json:"shardName,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DMLMsgHeader) Reset()         { *m = DMLMsgHeader{} }
func (m *DMLMsgHeader) String() string { return proto.CompactTextString(m) }
func (*DMLMsgHeader) ProtoMessage()    {}
func (*DMLMsgHeader) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{9}
}

func (m *DMLMsgHeader) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DMLMsgHeader.Unmarshal(m, b)
}
func (m *DMLMsgHeader) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DMLMsgHeader.Marshal(b, m, deterministic)
}
func (m *DMLMsgHeader) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DMLMsgHeader.Merge(m, src)
}
func (m *DMLMsgHeader) XXX_Size() int {
	return xxx_messageInfo_DMLMsgHeader.Size(m)
}
func (m *DMLMsgHeader) XXX_DiscardUnknown() {
	xxx_messageInfo_DMLMsgHeader.DiscardUnknown(m)
}

var xxx_messageInfo_DMLMsgHeader proto.InternalMessageInfo

func (m *DMLMsgHeader) GetBase() *MsgBase {
	if m != nil {
		return m.Base
	}
	return nil
}

func (m *DMLMsgHeader) GetShardName() string {
	if m != nil {
		return m.ShardName
	}
	return ""
}

type PrivilegeExt struct {
	ObjectType           ObjectType      `protobuf:"varint,1,opt,name=object_type,json=objectType,proto3,enum=milvus.proto.common.ObjectType" json:"object_type,omitempty"`
	ObjectPrivilege      ObjectPrivilege `protobuf:"varint,2,opt,name=object_privilege,json=objectPrivilege,proto3,enum=milvus.proto.common.ObjectPrivilege" json:"object_privilege,omitempty"`
	ObjectNameIndex      int32           `protobuf:"varint,3,opt,name=object_name_index,json=objectNameIndex,proto3" json:"object_name_index,omitempty"`
	ObjectNameIndexs     int32           `protobuf:"varint,4,opt,name=object_name_indexs,json=objectNameIndexs,proto3" json:"object_name_indexs,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *PrivilegeExt) Reset()         { *m = PrivilegeExt{} }
func (m *PrivilegeExt) String() string { return proto.CompactTextString(m) }
func (*PrivilegeExt) ProtoMessage()    {}
func (*PrivilegeExt) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{10}
}

func (m *PrivilegeExt) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PrivilegeExt.Unmarshal(m, b)
}
func (m *PrivilegeExt) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PrivilegeExt.Marshal(b, m, deterministic)
}
func (m *PrivilegeExt) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrivilegeExt.Merge(m, src)
}
func (m *PrivilegeExt) XXX_Size() int {
	return xxx_messageInfo_PrivilegeExt.Size(m)
}
func (m *PrivilegeExt) XXX_DiscardUnknown() {
	xxx_messageInfo_PrivilegeExt.DiscardUnknown(m)
}

var xxx_messageInfo_PrivilegeExt proto.InternalMessageInfo

func (m *PrivilegeExt) GetObjectType() ObjectType {
	if m != nil {
		return m.ObjectType
	}
	return ObjectType_Collection
}

func (m *PrivilegeExt) GetObjectPrivilege() ObjectPrivilege {
	if m != nil {
		return m.ObjectPrivilege
	}
	return ObjectPrivilege_PrivilegeAll
}

func (m *PrivilegeExt) GetObjectNameIndex() int32 {
	if m != nil {
		return m.ObjectNameIndex
	}
	return 0
}

func (m *PrivilegeExt) GetObjectNameIndexs() int32 {
	if m != nil {
		return m.ObjectNameIndexs
	}
	return 0
}

type SegmentStats struct {
	SegmentID            int64    `protobuf:"varint,1,opt,name=SegmentID,proto3" json:"SegmentID,omitempty"`
	NumRows              int64    `protobuf:"varint,2,opt,name=NumRows,proto3" json:"NumRows,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SegmentStats) Reset()         { *m = SegmentStats{} }
func (m *SegmentStats) String() string { return proto.CompactTextString(m) }
func (*SegmentStats) ProtoMessage()    {}
func (*SegmentStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{11}
}

func (m *SegmentStats) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SegmentStats.Unmarshal(m, b)
}
func (m *SegmentStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SegmentStats.Marshal(b, m, deterministic)
}
func (m *SegmentStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SegmentStats.Merge(m, src)
}
func (m *SegmentStats) XXX_Size() int {
	return xxx_messageInfo_SegmentStats.Size(m)
}
func (m *SegmentStats) XXX_DiscardUnknown() {
	xxx_messageInfo_SegmentStats.DiscardUnknown(m)
}

var xxx_messageInfo_SegmentStats proto.InternalMessageInfo

func (m *SegmentStats) GetSegmentID() int64 {
	if m != nil {
		return m.SegmentID
	}
	return 0
}

func (m *SegmentStats) GetNumRows() int64 {
	if m != nil {
		return m.NumRows
	}
	return 0
}

var E_PrivilegeExtObj = &proto.ExtensionDesc{
	ExtendedType:  (*descriptor.MessageOptions)(nil),
	ExtensionType: (*PrivilegeExt)(nil),
	Field:         1001,
	Name:          "milvus.proto.common.privilege_ext_obj",
	Tag:           "bytes,1001,opt,name=privilege_ext_obj",
	Filename:      "common.proto",
}

func init() {
	proto.RegisterEnum("milvus.proto.common.ErrorCode", ErrorCode_name, ErrorCode_value)
	proto.RegisterEnum("milvus.proto.common.IndexState", IndexState_name, IndexState_value)
	proto.RegisterEnum("milvus.proto.common.SegmentState", SegmentState_name, SegmentState_value)
	proto.RegisterEnum("milvus.proto.common.PlaceholderType", PlaceholderType_name, PlaceholderType_value)
	proto.RegisterEnum("milvus.proto.common.MsgType", MsgType_name, MsgType_value)
	proto.RegisterEnum("milvus.proto.common.DslType", DslType_name, DslType_value)
	proto.RegisterEnum("milvus.proto.common.CompactionState", CompactionState_name, CompactionState_value)
	proto.RegisterEnum("milvus.proto.common.ConsistencyLevel", ConsistencyLevel_name, ConsistencyLevel_value)
	proto.RegisterEnum("milvus.proto.common.ImportState", ImportState_name, ImportState_value)
	proto.RegisterEnum("milvus.proto.common.ObjectType", ObjectType_name, ObjectType_value)
	proto.RegisterEnum("milvus.proto.common.ObjectPrivilege", ObjectPrivilege_name, ObjectPrivilege_value)
	proto.RegisterEnum("milvus.proto.common.StateCode", StateCode_name, StateCode_value)
	proto.RegisterEnum("milvus.proto.common.LoadState", LoadState_name, LoadState_value)
	proto.RegisterType((*Status)(nil), "milvus.proto.common.Status")
	proto.RegisterType((*KeyValuePair)(nil), "milvus.proto.common.KeyValuePair")
	proto.RegisterType((*KeyDataPair)(nil), "milvus.proto.common.KeyDataPair")
	proto.RegisterType((*Blob)(nil), "milvus.proto.common.Blob")
	proto.RegisterType((*PlaceholderValue)(nil), "milvus.proto.common.PlaceholderValue")
	proto.RegisterType((*PlaceholderGroup)(nil), "milvus.proto.common.PlaceholderGroup")
	proto.RegisterType((*Address)(nil), "milvus.proto.common.Address")
	proto.RegisterType((*MsgBase)(nil), "milvus.proto.common.MsgBase")
	proto.RegisterType((*MsgHeader)(nil), "milvus.proto.common.MsgHeader")
	proto.RegisterType((*DMLMsgHeader)(nil), "milvus.proto.common.DMLMsgHeader")
	proto.RegisterType((*PrivilegeExt)(nil), "milvus.proto.common.PrivilegeExt")
	proto.RegisterType((*SegmentStats)(nil), "milvus.proto.common.SegmentStats")
	proto.RegisterExtension(E_PrivilegeExtObj)
}

func init() { proto.RegisterFile("common.proto", fileDescriptor_555bd8c177793206) }

var fileDescriptor_555bd8c177793206 = []byte{
	// 2998 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x59, 0x59, 0x70, 0x5c, 0x47,
	0xd5, 0xf6, 0x2c, 0x5a, 0xa6, 0x67, 0x24, 0xb5, 0xdb, 0x9b, 0x6c, 0xcb, 0xb6, 0xac, 0x3f, 0xf9,
	0x7f, 0xff, 0x22, 0x96, 0x13, 0x07, 0x92, 0x40, 0x55, 0x28, 0xa4, 0x19, 0x49, 0x9e, 0x8a, 0xb6,
	0xdc, 0x91, 0x03, 0x45, 0x15, 0xb8, 0x7a, 0xee, 0x3d, 0x1a, 0xb5, 0x7d, 0xe7, 0xf6, 0xcd, 0xed,
	0x1e, 0x59, 0x93, 0xa7, 0x24, 0x2c, 0xcf, 0x6c, 0x55, 0xbc, 0x51, 0x3c, 0x40, 0x58, 0x0a, 0x52,
	0xec, 0xf0, 0x08, 0x84, 0x25, 0x61, 0x7b, 0x66, 0x87, 0x47, 0x78, 0x67, 0xcd, 0x4a, 0x9d, 0xee,
	0xbb, 0x8e, 0x1d, 0x78, 0xe0, 0x6d, 0xfa, 0x3b, 0xfb, 0xe9, 0xd3, 0xa7, 0x4f, 0xdf, 0x21, 0x0d,
	0x57, 0xf6, 0xfb, 0x32, 0x58, 0x0a, 0x23, 0xa9, 0x25, 0x3b, 0xd6, 0x17, 0xfe, 0xc1, 0x40, 0xd9,
	0xd5, 0x92, 0x25, 0x9d, 0x99, 0xef, 0x49, 0xd9, 0xf3, 0xe1, 0x8a, 0x01, 0xbb, 0x83, 0xbd, 0x2b,
	0x1e, 0x28, 0x37, 0x12, 0xa1, 0x96, 0x91, 0x65, 0x5c, 0x50, 0x64, 0xbc, 0xa3, 0xb9, 0x1e, 0x28,
	0xf6, 0x28, 0x21, 0x10, 0x45, 0x32, 0xba, 0xe1, 0x4a, 0x0f, 0x66, 0x4b, 0xf3, 0xa5, 0x4b, 0xd3,
	0x57, 0xcf, 0x2f, 0xdd, 0x45, 0xeb, 0xd2, 0x2a, 0xb2, 0x35, 0xa5, 0x07, 0x4e, 0x0d, 0x92, 0x9f,
	0xec, 0x24, 0x19, 0x8f, 0x80, 0x2b, 0x19, 0xcc, 0x96, 0xe7, 0x4b, 0x97, 0x6a, 0x4e, 0xbc, 0x62,
	0x8c, 0x54, 0x8d, 0xc2, 0xca, 0x7c, 0xe9, 0xd2, 0x98, 0x63, 0x7e, 0x2f, 0x3c, 0x44, 0x1a, 0x8f,
	0xc1, 0xf0, 0x09, 0xee, 0x0f, 0x60, 0x87, 0x8b, 0x88, 0x51, 0x52, 0xb9, 0x05, 0x43, 0x63, 0xb3,
	0xe6, 0xe0, 0x4f, 0x76, 0x9c, 0x8c, 0x1d, 0x20, 0x39, 0x56, 0x66, 0x17, 0x0b, 0x0f, 0x92, 0xfa,
	0x63, 0x30, 0x6c, 0x71, 0xcd, 0xdf, 0x44, 0x8c, 0x91, 0xaa, 0xc7, 0x35, 0x37, 0x52, 0x0d, 0xc7,
	0xfc, 0x5e, 0x98, 0x23, 0xd5, 0x15, 0x5f, 0x76, 0x33, 0x95, 0x25, 0x43, 0x8c, 0x55, 0x1e, 0x10,
	0xba, 0xe3, 0x73, 0x17, 0xf6, 0xa5, 0xef, 0x41, 0x64, 0x5c, 0x42, 0xbd, 0x9a, 0xf7, 0x12, 0xbd,
	0x9a, 0xf7, 0xd8, 0x23, 0xa4, 0xaa, 0x87, 0xa1, 0xf5, 0x66, 0xfa, 0xea, 0x3d, 0x77, 0xcd, 0x4a,
	0x4e, 0xcd, 0xee, 0x30, 0x04, 0xc7, 0x48, 0x60, 0x5a, 0x8c, 0x21, 0x35, 0x5b, 0x99, 0xaf, 0x5c,
	0x6a, 0x38, 0xf1, 0x6a, 0xe1, 0x7d, 0x05, 0xbb, 0xeb, 0x91, 0x1c, 0x84, 0xac, 0x4d, 0x1a, 0x61,
	0x86, 0xa9, 0xd9, 0xd2, 0x7c, 0xe5, 0x52, 0xfd, 0xea, 0xbd, 0xff, 0xc9, 0x9a, 0x71, 0xda, 0x29,
	0x88, 0x2e, 0x5c, 0x26, 0x13, 0xcb, 0x9e, 0x17, 0x81, 0x52, 0x6c, 0x9a, 0x94, 0x45, 0x18, 0x07,
	0x53, 0x16, 0x21, 0xe6, 0x28, 0x94, 0x91, 0x36, 0xb1, 0x54, 0x1c, 0xf3, 0x7b, 0xe1, 0xf9, 0x12,
	0x99, 0xd8, 0x54, 0xbd, 0x15, 0xae, 0x80, 0x3d, 0x4c, 0x26, 0xfb, 0xaa, 0x77, 0xc3, 0xc4, 0x6b,
	0xab, 0x60, 0xee, 0xae, 0x1e, 0x6c, 0xaa, 0x9e, 0x89, 0x73, 0xa2, 0x6f, 0x7f, 0x60, 0x82, 0xfb,
	0xaa, 0xd7, 0x6e, 0xc5, 0x9a, 0xed, 0x82, 0xcd, 0x91, 0x9a, 0x16, 0x7d, 0x50, 0x9a, 0xf7, 0x43,
	0x53, 0x04, 0x55, 0x27, 0x03, 0xd8, 0x19, 0x32, 0xa9, 0xe4, 0x20, 0x72, 0xa1, 0xdd, 0x9a, 0xad,
	0x1a, 0xb1, 0x74, 0x8d, 0x34, 0xcd, 0xa3, 0x1e, 0xe8, 0x76, 0x6b, 0x76, 0xcc, 0xd2, 0x92, 0xf5,
	0xc2, 0xa3, 0xa4, 0xb6, 0xa9, 0x7a, 0xd7, 0x80, 0x7b, 0x10, 0xb1, 0xfb, 0x49, 0xb5, 0xcb, 0x95,
	0xf5, 0xb6, 0xfe, 0xe6, 0xde, 0x62, 0x74, 0x8e, 0xe1, 0x5c, 0x78, 0x3f, 0x69, 0xb4, 0x36, 0x37,
	0xfe, 0x0b, 0x0d, 0x18, 0x96, 0xda, 0xe7, 0x91, 0xb7, 0xc5, 0xfb, 0x49, 0x91, 0x66, 0xc0, 0xc2,
	0x2b, 0x25, 0xd2, 0xd8, 0x89, 0xc4, 0x81, 0xf0, 0xa1, 0x07, 0xab, 0x87, 0x9a, 0xbd, 0x8b, 0xd4,
	0x65, 0xf7, 0x26, 0xb8, 0x3a, 0x9f, 0xd7, 0x0b, 0x77, 0xb5, 0xb3, 0x6d, 0xf8, 0x4c, 0x6a, 0x89,
	0x4c, 0x7f, 0xb3, 0x6d, 0x42, 0x63, 0x0d, 0x61, 0xa2, 0xf8, 0xdf, 0x96, 0xa3, 0x55, 0x93, 0x3a,
	0xe1, 0xcc, 0xc8, 0x22, 0xc0, 0x16, 0xc9, 0xd1, 0x58, 0x61, 0xc0, 0xfb, 0x70, 0x43, 0x04, 0x1e,
	0x1c, 0xc6, 0xa7, 0x34, 0xe6, 0xc5, 0x50, 0xda, 0x08, 0xb3, 0xfb, 0x08, 0xbb, 0x83, 0x57, 0x99,
	0x0d, 0x1b, 0x73, 0xe8, 0x08, 0xb3, 0x5a, 0x58, 0x23, 0x8d, 0x0e, 0xf4, 0xfa, 0x10, 0x68, 0x6c,
	0x2d, 0x0a, 0x73, 0x15, 0xaf, 0xdb, 0x2d, 0x13, 0x7a, 0xc5, 0xc9, 0x00, 0x36, 0x4b, 0x26, 0xb6,
	0x06, 0x7d, 0x47, 0xde, 0x56, 0x71, 0xe1, 0x24, 0xcb, 0xc5, 0x17, 0x08, 0xa9, 0xa5, 0xbd, 0x86,
	0xd5, 0xc9, 0x44, 0x67, 0xe0, 0xba, 0xa0, 0x14, 0x3d, 0xc2, 0x8e, 0x91, 0x99, 0xeb, 0x01, 0x1c,
	0x86, 0xe0, 0x6a, 0xf0, 0x0c, 0x0f, 0x2d, 0xb1, 0xa3, 0x64, 0xaa, 0x29, 0x83, 0x00, 0x5c, 0xbd,
	0xc6, 0x85, 0x0f, 0x1e, 0x2d, 0xb3, 0xe3, 0x84, 0xee, 0x40, 0xd4, 0x17, 0x4a, 0x09, 0x19, 0xb4,
	0x20, 0x10, 0xe0, 0xd1, 0x0a, 0x3b, 0x45, 0x8e, 0x35, 0xa5, 0xef, 0x83, 0xab, 0x85, 0x0c, 0xb6,
	0xa4, 0x5e, 0x3d, 0x14, 0x4a, 0x2b, 0x5a, 0x45, 0xb5, 0x6d, 0xdf, 0x87, 0x1e, 0xf7, 0x97, 0xa3,
	0xde, 0x00, 0x1d, 0xa4, 0x63, 0xa8, 0x23, 0x06, 0x5b, 0xa2, 0x0f, 0x01, 0x6a, 0xa2, 0x13, 0x39,
	0xd4, 0x44, 0x8d, 0x7b, 0x44, 0x27, 0xd9, 0x69, 0x72, 0x22, 0x46, 0x73, 0x06, 0x78, 0x1f, 0x68,
	0x8d, 0xcd, 0x90, 0x7a, 0x4c, 0xda, 0xdd, 0xde, 0x79, 0x8c, 0x92, 0x9c, 0x06, 0x47, 0xde, 0x76,
	0xc0, 0x95, 0x91, 0x47, 0xeb, 0x39, 0x17, 0x9e, 0x00, 0x57, 0xcb, 0xa8, 0xdd, 0xa2, 0x0d, 0x74,
	0x38, 0x06, 0x3b, 0xc0, 0x23, 0x77, 0xdf, 0x01, 0x35, 0xf0, 0x35, 0x9d, 0x62, 0x94, 0x34, 0xd6,
	0x84, 0x0f, 0x5b, 0x52, 0xaf, 0xc9, 0x41, 0xe0, 0xd1, 0x69, 0x36, 0x4d, 0xc8, 0x26, 0x68, 0x1e,
	0x67, 0x60, 0x06, 0xcd, 0x36, 0xb9, 0xbb, 0x0f, 0x31, 0x40, 0xd9, 0x49, 0xc2, 0x9a, 0x3c, 0x08,
	0xa4, 0x6e, 0x46, 0xc0, 0x35, 0xac, 0x99, 0x8e, 0x41, 0x8f, 0xa2, 0x3b, 0x05, 0x5c, 0xf8, 0x40,
	0x59, 0xc6, 0xdd, 0x02, 0x1f, 0x52, 0xee, 0x63, 0x19, 0x77, 0x8c, 0x23, 0xf7, 0x71, 0x74, 0x7e,
	0x65, 0x20, 0x7c, 0xcf, 0xa4, 0xc4, 0x6e, 0xcb, 0x09, 0xf4, 0x31, 0x76, 0x7e, 0x6b, 0xa3, 0xdd,
	0xd9, 0xa5, 0x27, 0xd9, 0x09, 0x72, 0x34, 0x46, 0x36, 0x41, 0x47, 0xc2, 0x35, 0xc9, 0x3b, 0x85,
	0xae, 0x6e, 0x0f, 0xf4, 0xf6, 0xde, 0x26, 0xf4, 0x65, 0x34, 0xa4, 0xb3, 0xb8, 0xa1, 0x46, 0x53,
	0xb2, 0x45, 0xf4, 0x34, 0x5a, 0x58, 0xed, 0x87, 0x7a, 0x98, 0xa5, 0x97, 0x9e, 0x61, 0x67, 0xc9,
	0xa9, 0xeb, 0xa1, 0xc7, 0x35, 0xb4, 0xfb, 0xd8, 0xce, 0x76, 0xb9, 0xba, 0x85, 0xe1, 0x0e, 0x22,
	0xa0, 0x67, 0xd9, 0x19, 0x72, 0xb2, 0xb8, 0x17, 0x69, 0xb2, 0xe6, 0x50, 0xd0, 0x46, 0xdb, 0x8c,
	0xc0, 0x83, 0x40, 0x0b, 0xee, 0x27, 0x82, 0xe7, 0x32, 0xad, 0x77, 0x12, 0xcf, 0x23, 0xd1, 0x46,
	0x7e, 0x27, 0xf1, 0x02, 0x9b, 0x25, 0xc7, 0xd7, 0x41, 0xdf, 0x49, 0x99, 0x47, 0xca, 0x86, 0x50,
	0x86, 0x74, 0x5d, 0x41, 0xa4, 0x12, 0xca, 0x45, 0xc6, 0xc8, 0xf4, 0x3a, 0x68, 0x04, 0x13, 0x6c,
	0x01, 0xf3, 0x64, 0xdd, 0x73, 0xa4, 0x0f, 0x09, 0xfc, 0x3f, 0x98, 0x83, 0x56, 0x24, 0xc3, 0x3c,
	0x78, 0x0f, 0x86, 0xb9, 0x1d, 0x42, 0xc4, 0x35, 0xa0, 0x8e, 0x3c, 0xed, 0x5e, 0xd4, 0xd3, 0x01,
	0xcc, 0x40, 0x1e, 0xfe, 0xdf, 0x0c, 0xce, 0x5b, 0xfd, 0x3f, 0xac, 0xe1, 0x98, 0x1b, 0x6c, 0x2f,
	0x4e, 0x48, 0x97, 0x30, 0xea, 0xd8, 0x48, 0xda, 0x47, 0x12, 0xe2, 0xff, 0x63, 0xa9, 0x58, 0xb9,
	0xf5, 0x88, 0x07, 0x3a, 0xc1, 0x17, 0xd9, 0x45, 0x72, 0xce, 0x81, 0xbd, 0x08, 0xd4, 0xfe, 0x8e,
	0xf4, 0x85, 0x3b, 0x6c, 0x07, 0x7b, 0x32, 0x2d, 0x49, 0x64, 0x79, 0x0b, 0x7a, 0x82, 0x69, 0xb1,
	0xf4, 0x04, 0xbe, 0x0f, 0x73, 0xb2, 0x25, 0x75, 0x07, 0xdb, 0xea, 0x86, 0x69, 0xd4, 0xf4, 0x32,
	0x5a, 0xd9, 0x92, 0x0e, 0x84, 0xbe, 0x70, 0xf9, 0xf2, 0x01, 0x17, 0x3e, 0xef, 0xfa, 0x40, 0x97,
	0x30, 0x29, 0x71, 0x4f, 0x49, 0xf7, 0xf7, 0x0a, 0x9b, 0x22, 0xb5, 0x35, 0x19, 0xb9, 0xd0, 0x82,
	0x60, 0x48, 0xef, 0xc7, 0xa5, 0xc3, 0x35, 0x6c, 0x88, 0xbe, 0xd0, 0xf4, 0x01, 0xab, 0xde, 0x83,
	0x76, 0x6b, 0x4b, 0xea, 0x4d, 0xae, 0xdd, 0x7d, 0x7a, 0x15, 0xeb, 0xfa, 0x7a, 0xa8, 0x20, 0xd2,
	0xcb, 0x03, 0x2d, 0xdb, 0xad, 0xdd, 0x68, 0x00, 0xf4, 0x41, 0x36, 0x47, 0x66, 0xdb, 0x81, 0x1a,
	0xec, 0xed, 0x09, 0x57, 0x40, 0xa0, 0x6d, 0x81, 0xee, 0xca, 0x0d, 0xc9, 0x3d, 0xfa, 0x56, 0xdc,
	0x54, 0x8b, 0x3c, 0x3e, 0x90, 0x9a, 0xaf, 0x1e, 0xee, 0xf3, 0x81, 0xd2, 0xe0, 0xd1, 0xb7, 0xa1,
	0xb3, 0x2d, 0xa1, 0x6e, 0x8d, 0xe0, 0x0f, 0x61, 0xbc, 0xbb, 0xa2, 0x0f, 0xbb, 0xc2, 0xbd, 0xb5,
	0x21, 0x83, 0x5e, 0x0b, 0x7c, 0x3e, 0xa4, 0x0f, 0x63, 0xbd, 0x6f, 0x49, 0xed, 0x00, 0xf7, 0x86,
	0x1d, 0x88, 0x0e, 0x80, 0x3e, 0x82, 0x19, 0x4f, 0xa0, 0xa6, 0x94, 0x91, 0xb7, 0xec, 0x6a, 0x71,
	0xc0, 0xb5, 0x08, 0x7a, 0xf4, 0xed, 0x78, 0x60, 0x70, 0x18, 0x32, 0x84, 0xad, 0x65, 0xea, 0x31,
	0x46, 0xa6, 0x5a, 0x2d, 0x07, 0x9e, 0x1c, 0x80, 0xd2, 0x0e, 0x77, 0x81, 0xfe, 0x69, 0x62, 0xd1,
	0x25, 0xc4, 0x1c, 0x22, 0xec, 0xc5, 0x80, 0x31, 0x67, 0xab, 0x2d, 0x19, 0x00, 0x3d, 0xc2, 0x1a,
	0x64, 0xf2, 0x7a, 0x20, 0x94, 0x1a, 0x80, 0x47, 0x4b, 0xd8, 0x40, 0xda, 0xc1, 0x4e, 0x24, 0x7b,
	0x38, 0x3d, 0xd0, 0x32, 0x52, 0xd7, 0x44, 0x20, 0xd4, 0xbe, 0x69, 0x9d, 0x84, 0x8c, 0xc7, 0x9d,
	0xa4, 0xca, 0x6a, 0x64, 0xcc, 0x01, 0x1d, 0x0d, 0xe9, 0xd8, 0xe2, 0xb3, 0xa5, 0x42, 0xcf, 0xc7,
	0x61, 0x80, 0xe6, 0xd7, 0x99, 0xa5, 0xf4, 0x2c, 0x97, 0xb0, 0xa3, 0xaf, 0x47, 0xf2, 0x36, 0xc6,
	0x52, 0x46, 0xc5, 0x1d, 0xe0, 0xbe, 0x31, 0x52, 0x27, 0x13, 0x6b, 0xfe, 0xc0, 0x58, 0xac, 0x1a,
	0xfb, 0xb8, 0x40, 0xb6, 0x31, 0x24, 0x61, 0xed, 0x87, 0xe0, 0xd1, 0x71, 0xdc, 0x4f, 0x7b, 0xe2,
	0x91, 0x36, 0xb1, 0xf8, 0x4e, 0x32, 0x33, 0x32, 0x84, 0xb1, 0x49, 0x52, 0x8d, 0x4d, 0x53, 0xd2,
	0x58, 0x11, 0x01, 0x8f, 0x86, 0xb6, 0xad, 0x52, 0x0f, 0xb3, 0xb7, 0xe6, 0x4b, 0xae, 0x63, 0x00,
	0x16, 0x9f, 0x9b, 0x31, 0x53, 0x90, 0x11, 0x9c, 0x22, 0xb5, 0xeb, 0x81, 0x07, 0x7b, 0x22, 0x00,
	0x8f, 0x1e, 0x31, 0xed, 0xce, 0x36, 0x8a, 0xac, 0xef, 0x60, 0xba, 0xa7, 0xd1, 0x99, 0x1c, 0x06,
	0xb8, 0x87, 0xd7, 0xb8, 0xca, 0x41, 0x7b, 0xa6, 0x0a, 0xcc, 0xdc, 0xdd, 0xcd, 0x8b, 0xf7, 0x4c,
	0xc9, 0xee, 0xcb, 0xdb, 0x19, 0xa6, 0xe8, 0x3e, 0x5a, 0x5a, 0x07, 0xdd, 0x19, 0x2a, 0x0d, 0xfd,
	0xa6, 0x0c, 0xf6, 0x44, 0x4f, 0x51, 0x81, 0x96, 0xb0, 0xd8, 0x72, 0xe2, 0x37, 0xb1, 0x88, 0x1c,
	0xf0, 0x81, 0xab, 0xbc, 0xd6, 0x5b, 0xa6, 0xe1, 0x1b, 0x57, 0x97, 0x7d, 0xc1, 0x15, 0xf5, 0x31,
	0x14, 0xf4, 0xd2, 0x2e, 0xfb, 0xb8, 0xbf, 0xcb, 0xbe, 0x86, 0xc8, 0xae, 0x03, 0xf4, 0xc2, 0xac,
	0x73, 0x4a, 0x24, 0x7a, 0xe1, 0x00, 0xde, 0xf5, 0x39, 0x34, 0xc4, 0xd8, 0x92, 0x40, 0xac, 0xf4,
	0x93, 0x68, 0x0d, 0x4f, 0xae, 0x59, 0x82, 0xa2, 0x11, 0x3b, 0x4e, 0x66, 0xac, 0xf9, 0x1d, 0x1e,
	0x69, 0x61, 0x04, 0x5f, 0x2c, 0x99, 0xc2, 0x8c, 0x64, 0x98, 0x61, 0x2f, 0xe1, 0x75, 0xdd, 0xb8,
	0xc6, 0x55, 0x06, 0xfd, 0xa4, 0xc4, 0x4e, 0x92, 0xa3, 0x89, 0x81, 0x0c, 0xff, 0x69, 0x89, 0x1d,
	0x23, 0xd3, 0x98, 0xa9, 0x14, 0x53, 0xf4, 0x67, 0x06, 0xc4, 0x9c, 0xe4, 0xc0, 0x9f, 0x1b, 0x0d,
	0x71, 0x52, 0x72, 0xf8, 0x2f, 0x8c, 0x31, 0xd4, 0x10, 0xd7, 0xa4, 0xa2, 0x2f, 0x97, 0xd0, 0xd3,
	0xc4, 0x58, 0x0c, 0xd3, 0x57, 0x0c, 0x23, 0x6a, 0x4d, 0x19, 0x5f, 0x35, 0x8c, 0xb1, 0xce, 0x14,
	0x7d, 0xcd, 0xa0, 0xd7, 0x78, 0xe0, 0xc9, 0xbd, 0xbd, 0x14, 0x7d, 0xbd, 0xc4, 0x66, 0xc9, 0x31,
	0x14, 0x5f, 0xe1, 0x3e, 0x0f, 0xdc, 0x8c, 0xff, 0x8d, 0x12, 0x3b, 0x41, 0xe8, 0x88, 0x39, 0x45,
	0x9f, 0x2e, 0xb3, 0x39, 0x72, 0x6a, 0x0d, 0x3c, 0x88, 0x30, 0x8b, 0xe6, 0x64, 0x42, 0x62, 0x9b,
	0x3e, 0x53, 0x66, 0x0b, 0xe4, 0x9c, 0xa1, 0x8e, 0x48, 0x1a, 0x46, 0x3c, 0xfa, 0xf4, 0xd9, 0x32,
	0xa3, 0xc9, 0x86, 0x1b, 0x94, 0x7e, 0xa9, 0x6c, 0xb2, 0x1d, 0x0b, 0x58, 0xec, 0xcb, 0x65, 0x36,
	0x6d, 0xab, 0xc0, 0xae, 0x9f, 0x2f, 0xb3, 0x3a, 0x19, 0x6f, 0x07, 0xd8, 0xe8, 0xe8, 0x47, 0xf0,
	0xc0, 0x8d, 0xdb, 0xdb, 0x8c, 0x7e, 0x14, 0x8f, 0xf8, 0x98, 0x39, 0x70, 0xf4, 0x63, 0x38, 0x29,
	0x31, 0x07, 0x14, 0x04, 0x5e, 0x7e, 0xa0, 0xa3, 0x1f, 0x37, 0x12, 0xb6, 0x4f, 0xd2, 0x4f, 0x98,
	0x85, 0x9d, 0x4b, 0xe8, 0x5f, 0x2a, 0x26, 0xd3, 0xf9, 0x21, 0xe5, 0xaf, 0x15, 0xf4, 0x67, 0x1d,
	0x74, 0xd6, 0x77, 0xe8, 0xdf, 0x2a, 0xec, 0x0c, 0x39, 0x91, 0x60, 0x66, 0x64, 0x48, 0x3b, 0xce,
	0xdf, 0x2b, 0x98, 0x13, 0xbc, 0x3f, 0xd3, 0xd2, 0x43, 0x21, 0xa1, 0xb4, 0x70, 0x15, 0xfd, 0x47,
	0x85, 0x9d, 0x25, 0x27, 0xd7, 0x41, 0xa7, 0xdb, 0x9b, 0x23, 0xfe, 0xb3, 0xc2, 0xa6, 0xc8, 0x24,
	0xf6, 0x24, 0x01, 0x07, 0x40, 0x5f, 0xae, 0x60, 0x8d, 0x24, 0xcb, 0xd8, 0x9d, 0x57, 0x2a, 0xb8,
	0x73, 0xef, 0xc6, 0x76, 0xdf, 0xea, 0x37, 0xf7, 0x79, 0x10, 0x80, 0xaf, 0xe8, 0xab, 0x15, 0xdc,
	0x1f, 0x07, 0xfa, 0xf2, 0x00, 0x72, 0xf0, 0x6b, 0x26, 0x03, 0x86, 0xf9, 0xf1, 0x01, 0x44, 0xc3,
	0x94, 0xf0, 0x7a, 0x05, 0x77, 0xda, 0xf2, 0x17, 0x29, 0x6f, 0x54, 0xd8, 0x39, 0x32, 0x6b, 0x5b,
	0x59, 0xb2, 0xcf, 0x48, 0xec, 0x01, 0xde, 0x7b, 0xf4, 0xe9, 0x6a, 0xaa, 0xb1, 0x05, 0xbe, 0xe6,
	0xa9, 0xdc, 0x33, 0x55, 0xf4, 0x0b, 0x8f, 0x7e, 0x76, 0xdd, 0x29, 0xfa, 0x6c, 0x15, 0xb7, 0x77,
	0x1d, 0x74, 0x7c, 0xe3, 0x29, 0xfa, 0x01, 0x9c, 0x52, 0xa7, 0xaf, 0x07, 0x6a, 0xd0, 0x4d, 0x1d,
	0xa5, 0x1f, 0x4c, 0x84, 0x5b, 0x42, 0xe9, 0x48, 0x74, 0x07, 0xe6, 0xe0, 0x7c, 0xa8, 0x8a, 0x41,
	0x75, 0x86, 0x81, 0x5b, 0x80, 0x3f, 0x6c, 0x74, 0xa6, 0x95, 0xb4, 0x27, 0xe9, 0x2f, 0xab, 0x6c,
	0x86, 0x10, 0xdb, 0x73, 0x0c, 0xf0, 0xab, 0x44, 0x1f, 0x8e, 0xa5, 0x07, 0x10, 0x99, 0x3b, 0x9b,
	0xfe, 0x3a, 0x75, 0x31, 0xd7, 0xd9, 0xe9, 0x6f, 0xaa, 0x98, 0xf4, 0xe4, 0x3a, 0xa3, 0x5f, 0xa9,
	0xa1, 0x7f, 0x26, 0x27, 0x78, 0xb9, 0xda, 0x82, 0xf9, 0x6a, 0x0d, 0xeb, 0x0f, 0x0f, 0x86, 0xad,
	0xbf, 0xaf, 0x99, 0x75, 0x7c, 0x51, 0xb5, 0x5b, 0xf4, 0xeb, 0x38, 0x1e, 0x93, 0x78, 0xbd, 0xdb,
	0xd9, 0xa6, 0xdf, 0xa8, 0xa1, 0xa9, 0x65, 0xdf, 0x97, 0x2e, 0xd7, 0xe9, 0xf1, 0xfc, 0x66, 0x0d,
	0xcf, 0x77, 0xce, 0x7a, 0xbc, 0xef, 0xdf, 0xaa, 0x99, 0x40, 0x2d, 0x6e, 0x6a, 0xb7, 0x85, 0x4d,
	0xff, 0xdb, 0x46, 0x2b, 0x1e, 0x13, 0xf4, 0x64, 0x57, 0xd3, 0xef, 0x18, 0xbe, 0xd1, 0x89, 0x8f,
	0xfe, 0xb6, 0x1e, 0x57, 0x68, 0x0e, 0xfb, 0x5d, 0xdd, 0x1e, 0xd8, 0xe2, 0x88, 0x47, 0x7f, 0x6f,
	0xe0, 0xd1, 0xb1, 0x90, 0xfe, 0xa1, 0x8e, 0x8e, 0xe5, 0x27, 0x3b, 0xec, 0x9d, 0x8a, 0xfe, 0xb1,
	0x8e, 0x1e, 0x64, 0x33, 0x1c, 0xfd, 0x6e, 0x03, 0x93, 0x95, 0x4c, 0x6f, 0xf4, 0x7b, 0x0d, 0x0c,
	0x73, 0x64, 0x6e, 0xa3, 0xdf, 0x6f, 0x98, 0xed, 0x48, 0x27, 0x36, 0xfa, 0x42, 0x0e, 0x40, 0x2e,
	0xfa, 0x83, 0x86, 0x69, 0x89, 0x85, 0x29, 0x8d, 0xfe, 0xb0, 0x81, 0xbe, 0x8d, 0xce, 0x67, 0xf4,
	0x47, 0x0d, 0xbb, 0xdd, 0xe9, 0x64, 0x46, 0x7f, 0xdc, 0xc0, 0x33, 0x74, 0xf7, 0x99, 0x8c, 0xbe,
	0x68, 0x6c, 0x65, 0xd3, 0x18, 0x7d, 0xa9, 0x81, 0xa5, 0x1e, 0xc7, 0x10, 0xdb, 0x32, 0xdf, 0x2b,
	0xe8, 0x67, 0xa6, 0x4c, 0xc3, 0xc6, 0x60, 0x0a, 0xf8, 0x67, 0xa7, 0xb0, 0xc6, 0x51, 0x45, 0x01,
	0x57, 0xf4, 0xb9, 0x29, 0x3c, 0xf6, 0x49, 0x6b, 0x2a, 0x0a, 0x7d, 0x6e, 0x0a, 0x3b, 0xc7, 0x6e,
	0xc4, 0x03, 0xb5, 0x07, 0x11, 0x6e, 0x18, 0xfd, 0xfc, 0x14, 0x66, 0x27, 0x81, 0xe2, 0x13, 0x40,
	0xbf, 0x30, 0xb5, 0xb8, 0x40, 0x26, 0x5a, 0xca, 0x37, 0xf7, 0xf4, 0x04, 0xa9, 0xb4, 0x94, 0x4f,
	0x8f, 0xe0, 0xb5, 0xb6, 0x22, 0xa5, 0xbf, 0x7a, 0x18, 0x46, 0x4f, 0x3c, 0x40, 0x4b, 0x8b, 0x2b,
	0x64, 0xa6, 0x29, 0xfb, 0x21, 0x4f, 0x1b, 0x88, 0xb9, 0x9a, 0xed, 0x9d, 0x0e, 0x9e, 0x2d, 0xdd,
	0x23, 0x78, 0x37, 0xae, 0x1e, 0x82, 0x3b, 0x30, 0x13, 0x44, 0x09, 0x97, 0x28, 0x84, 0x9b, 0xee,
	0xd1, 0xf2, 0xe2, 0x7b, 0x08, 0x6d, 0xca, 0x40, 0x09, 0xa5, 0x21, 0x70, 0x87, 0x1b, 0x70, 0x00,
	0xbe, 0x99, 0x53, 0x74, 0x24, 0x83, 0x1e, 0x3d, 0x62, 0x9e, 0xa4, 0x60, 0x9e, 0x96, 0x76, 0x9a,
	0x59, 0xc1, 0xb1, 0xd3, 0xbc, 0x3b, 0xa7, 0x09, 0x59, 0x3d, 0x80, 0x40, 0x0f, 0xb8, 0xef, 0x0f,
	0x69, 0x05, 0xd7, 0xcd, 0x81, 0xd2, 0xb2, 0x2f, 0x9e, 0xc2, 0xa1, 0x66, 0xf1, 0x53, 0x25, 0x52,
	0xb7, 0xa3, 0x4b, 0xea, 0x9a, 0x5d, 0xee, 0x40, 0xe0, 0x09, 0xa3, 0x1c, 0x9f, 0x4d, 0x06, 0x8a,
	0xe7, 0xad, 0x52, 0xc6, 0xd4, 0xd1, 0x3c, 0x32, 0x1e, 0x9a, 0xd7, 0x62, 0x2c, 0x17, 0x19, 0x3f,
	0x3d, 0x3a, 0x96, 0xf1, 0x25, 0x43, 0xd4, 0x64, 0xc6, 0x97, 0x85, 0x37, 0x8e, 0x4f, 0x86, 0xbc,
	0x85, 0xe5, 0xc0, 0x6b, 0xfa, 0xc0, 0x71, 0xe0, 0x99, 0x58, 0xbc, 0x4a, 0x48, 0xf6, 0x21, 0xc2,
	0xb8, 0x9f, 0x0d, 0x02, 0x47, 0x30, 0x09, 0xeb, 0xbe, 0xec, 0x72, 0x9f, 0x96, 0x70, 0xc4, 0x32,
	0x35, 0x59, 0x5e, 0xfc, 0xe4, 0x04, 0x99, 0x19, 0xf9, 0xec, 0x80, 0x51, 0xa4, 0x8b, 0x65, 0x1f,
	0x37, 0xea, 0x1c, 0x39, 0x9d, 0x22, 0x77, 0xcc, 0x54, 0x25, 0x1c, 0x78, 0x53, 0xf2, 0xc8, 0x70,
	0x55, 0x66, 0x17, 0xc8, 0xd9, 0x8c, 0x78, 0xe7, 0x48, 0x85, 0x37, 0xc7, 0x6c, 0xca, 0x30, 0x3a,
	0x5b, 0x55, 0x31, 0x31, 0x29, 0xd5, 0xcc, 0xee, 0xe6, 0x71, 0x9f, 0x7d, 0x23, 0xb1, 0x97, 0x3c,
	0x1d, 0xc7, 0xf7, 0x76, 0xe6, 0x63, 0x5a, 0x45, 0x74, 0x02, 0xf3, 0x98, 0x12, 0xe2, 0xeb, 0x73,
	0xb2, 0x00, 0xc6, 0xd7, 0x68, 0x0d, 0x93, 0x9b, 0x82, 0xd8, 0x32, 0xb3, 0x6e, 0x45, 0xf0, 0xc1,
	0x30, 0x92, 0x02, 0xdb, 0x16, 0xeb, 0x05, 0x8a, 0xbd, 0xe4, 0x41, 0x73, 0xe1, 0xd3, 0x06, 0x0e,
	0x91, 0x85, 0xbc, 0x58, 0x89, 0xa9, 0x82, 0xf1, 0xf8, 0x12, 0x9e, 0xc6, 0x71, 0x31, 0x7b, 0xa0,
	0x99, 0xbb, 0x7c, 0xa6, 0x80, 0x99, 0xf6, 0x4c, 0x69, 0xc1, 0x5c, 0x6e, 0x6c, 0xa1, 0x47, 0x8b,
	0x81, 0x9a, 0x22, 0xa1, 0xac, 0x90, 0x5d, 0xeb, 0xf7, 0xf6, 0xed, 0x00, 0x22, 0xb5, 0x2f, 0x42,
	0x7a, 0xac, 0x90, 0x34, 0xdb, 0x21, 0x4d, 0x5d, 0x1c, 0x2f, 0xa4, 0x02, 0x5d, 0xcf, 0x84, 0x4e,
	0x14, 0x37, 0xcc, 0xf4, 0xa8, 0x8c, 0x7a, 0xb2, 0x40, 0xdd, 0xe4, 0x01, 0xef, 0xe5, 0x0c, 0x9e,
	0x2a, 0x18, 0xcc, 0x35, 0xc7, 0xd9, 0x82, 0xf3, 0xf1, 0x94, 0x72, 0x9a, 0xcd, 0x93, 0xb9, 0x11,
	0xe7, 0x8b, 0x0d, 0xe8, 0x0c, 0x3b, 0x4f, 0xce, 0x14, 0xfc, 0x2c, 0xd2, 0xcf, 0xb2, 0x05, 0x72,
	0xfe, 0x8e, 0xea, 0x2b, 0xf2, 0xcc, 0x15, 0x2a, 0xf4, 0x2e, 0x1d, 0xf0, 0x1c, 0xbe, 0xae, 0x53,
	0x86, 0x42, 0xb7, 0x3b, 0x5f, 0x88, 0x76, 0xb4, 0xeb, 0x5d, 0x28, 0x68, 0x5e, 0x07, 0x8d, 0xdb,
	0x25, 0x82, 0x5e, 0x3a, 0x36, 0xcd, 0x17, 0x34, 0xc7, 0x0c, 0xb6, 0xcd, 0x5d, 0x5c, 0xec, 0x90,
	0x9a, 0xf9, 0x69, 0x3e, 0xa4, 0x61, 0x63, 0x09, 0x04, 0xde, 0x5b, 0xe2, 0x29, 0x91, 0xf4, 0xb1,
	0x6b, 0xc0, 0x7d, 0xbd, 0x3f, 0xa4, 0x25, 0x7c, 0x6f, 0x2d, 0x77, 0x03, 0x19, 0xf5, 0xb9, 0x4f,
	0xcb, 0xa6, 0xc5, 0x69, 0x1e, 0x78, 0x2b, 0xd8, 0xc5, 0x1a, 0x64, 0xb2, 0xa3, 0x65, 0x18, 0xa2,
	0x54, 0x75, 0xd1, 0xb5, 0x37, 0xba, 0x6d, 0x60, 0xf8, 0x82, 0x4f, 0x16, 0xe9, 0x13, 0xcf, 0xbc,
	0x9b, 0xf2, 0xb0, 0x39, 0x74, 0xa5, 0x02, 0x1a, 0xc7, 0x61, 0x7b, 0x59, 0x01, 0xc5, 0xa7, 0xe0,
	0x3b, 0x24, 0x39, 0x9a, 0x7e, 0xef, 0xbc, 0x01, 0x87, 0xfa, 0x86, 0xec, 0xde, 0x64, 0x17, 0x96,
	0xec, 0xff, 0x1a, 0x4b, 0xc9, 0xff, 0x1a, 0x4b, 0x9b, 0xa0, 0x14, 0x56, 0x47, 0x68, 0x8e, 0xfa,
	0xec, 0x9f, 0x27, 0xcc, 0x87, 0xdc, 0x8b, 0x77, 0xff, 0x74, 0x9e, 0xfb, 0x30, 0xeb, 0xcc, 0x84,
	0xb9, 0xd5, 0x76, 0xf7, 0xe6, 0xca, 0x1e, 0x99, 0x16, 0x32, 0x91, 0xeb, 0x45, 0xa1, 0xbb, 0x52,
	0x6f, 0x1a, 0xb9, 0x1d, 0xd4, 0xb1, 0x53, 0x7a, 0xef, 0x03, 0x3d, 0xa1, 0xf7, 0x07, 0x5d, 0xd4,
	0x76, 0xc5, 0xb2, 0x5d, 0x16, 0x32, 0xf9, 0x65, 0x0c, 0x5d, 0xe9, 0xc9, 0xcb, 0x3c, 0x14, 0x57,
	0xac, 0xbd, 0xb0, 0xfb, 0xe9, 0x52, 0xe9, 0x8b, 0xe5, 0xe9, 0xf6, 0xf6, 0xd2, 0xa6, 0xd5, 0xba,
	0x1e, 0x85, 0x6e, 0x77, 0xdc, 0xb0, 0x3e, 0xf8, 0xaf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x67, 0xb9,
	0x91, 0x17, 0xc6, 0x19, 0x00, 0x00,
}
