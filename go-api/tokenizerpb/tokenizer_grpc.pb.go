// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.29.3
// source: tokenizer.proto

package schemapb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Tokenizer_Tokenize_FullMethodName = "/milvus.proto.tokenizer.Tokenizer/Tokenize"
)

// TokenizerClient is the client API for Tokenizer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TokenizerClient interface {
	Tokenize(ctx context.Context, in *TokenizationRequest, opts ...grpc.CallOption) (*TokenizationResponse, error)
}

type tokenizerClient struct {
	cc grpc.ClientConnInterface
}

func NewTokenizerClient(cc grpc.ClientConnInterface) TokenizerClient {
	return &tokenizerClient{cc}
}

func (c *tokenizerClient) Tokenize(ctx context.Context, in *TokenizationRequest, opts ...grpc.CallOption) (*TokenizationResponse, error) {
	out := new(TokenizationResponse)
	err := c.cc.Invoke(ctx, Tokenizer_Tokenize_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TokenizerServer is the server API for Tokenizer service.
// All implementations should embed UnimplementedTokenizerServer
// for forward compatibility
type TokenizerServer interface {
	Tokenize(context.Context, *TokenizationRequest) (*TokenizationResponse, error)
}

// UnimplementedTokenizerServer should be embedded to have forward compatible implementations.
type UnimplementedTokenizerServer struct {
}

func (UnimplementedTokenizerServer) Tokenize(context.Context, *TokenizationRequest) (*TokenizationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Tokenize not implemented")
}

// UnsafeTokenizerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TokenizerServer will
// result in compilation errors.
type UnsafeTokenizerServer interface {
	mustEmbedUnimplementedTokenizerServer()
}

func RegisterTokenizerServer(s grpc.ServiceRegistrar, srv TokenizerServer) {
	s.RegisterService(&Tokenizer_ServiceDesc, srv)
}

func _Tokenizer_Tokenize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TokenizationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenizerServer).Tokenize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tokenizer_Tokenize_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenizerServer).Tokenize(ctx, req.(*TokenizationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Tokenizer_ServiceDesc is the grpc.ServiceDesc for Tokenizer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Tokenizer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "milvus.proto.tokenizer.Tokenizer",
	HandlerType: (*TokenizerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Tokenize",
			Handler:    _Tokenizer_Tokenize_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tokenizer.proto",
}
