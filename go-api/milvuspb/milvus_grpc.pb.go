// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.4
// source: milvus.proto

package milvuspb

import (
	context "context"
	commonpb "github.com/milvus-io/milvus-proto/go-api/v2/commonpb"
	federpb "github.com/milvus-io/milvus-proto/go-api/v2/federpb"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MilvusService_CreateCollection_FullMethodName            = "/milvus.proto.milvus.MilvusService/CreateCollection"
	MilvusService_DropCollection_FullMethodName              = "/milvus.proto.milvus.MilvusService/DropCollection"
	MilvusService_HasCollection_FullMethodName               = "/milvus.proto.milvus.MilvusService/HasCollection"
	MilvusService_LoadCollection_FullMethodName              = "/milvus.proto.milvus.MilvusService/LoadCollection"
	MilvusService_ReleaseCollection_FullMethodName           = "/milvus.proto.milvus.MilvusService/ReleaseCollection"
	MilvusService_DescribeCollection_FullMethodName          = "/milvus.proto.milvus.MilvusService/DescribeCollection"
	MilvusService_GetCollectionStatistics_FullMethodName     = "/milvus.proto.milvus.MilvusService/GetCollectionStatistics"
	MilvusService_ShowCollections_FullMethodName             = "/milvus.proto.milvus.MilvusService/ShowCollections"
	MilvusService_AlterCollection_FullMethodName             = "/milvus.proto.milvus.MilvusService/AlterCollection"
	MilvusService_AlterCollectionField_FullMethodName        = "/milvus.proto.milvus.MilvusService/AlterCollectionField"
	MilvusService_CreatePartition_FullMethodName             = "/milvus.proto.milvus.MilvusService/CreatePartition"
	MilvusService_DropPartition_FullMethodName               = "/milvus.proto.milvus.MilvusService/DropPartition"
	MilvusService_HasPartition_FullMethodName                = "/milvus.proto.milvus.MilvusService/HasPartition"
	MilvusService_LoadPartitions_FullMethodName              = "/milvus.proto.milvus.MilvusService/LoadPartitions"
	MilvusService_ReleasePartitions_FullMethodName           = "/milvus.proto.milvus.MilvusService/ReleasePartitions"
	MilvusService_GetPartitionStatistics_FullMethodName      = "/milvus.proto.milvus.MilvusService/GetPartitionStatistics"
	MilvusService_ShowPartitions_FullMethodName              = "/milvus.proto.milvus.MilvusService/ShowPartitions"
	MilvusService_GetLoadingProgress_FullMethodName          = "/milvus.proto.milvus.MilvusService/GetLoadingProgress"
	MilvusService_GetLoadState_FullMethodName                = "/milvus.proto.milvus.MilvusService/GetLoadState"
	MilvusService_CreateAlias_FullMethodName                 = "/milvus.proto.milvus.MilvusService/CreateAlias"
	MilvusService_DropAlias_FullMethodName                   = "/milvus.proto.milvus.MilvusService/DropAlias"
	MilvusService_AlterAlias_FullMethodName                  = "/milvus.proto.milvus.MilvusService/AlterAlias"
	MilvusService_DescribeAlias_FullMethodName               = "/milvus.proto.milvus.MilvusService/DescribeAlias"
	MilvusService_ListAliases_FullMethodName                 = "/milvus.proto.milvus.MilvusService/ListAliases"
	MilvusService_CreateIndex_FullMethodName                 = "/milvus.proto.milvus.MilvusService/CreateIndex"
	MilvusService_AlterIndex_FullMethodName                  = "/milvus.proto.milvus.MilvusService/AlterIndex"
	MilvusService_DescribeIndex_FullMethodName               = "/milvus.proto.milvus.MilvusService/DescribeIndex"
	MilvusService_GetIndexStatistics_FullMethodName          = "/milvus.proto.milvus.MilvusService/GetIndexStatistics"
	MilvusService_GetIndexState_FullMethodName               = "/milvus.proto.milvus.MilvusService/GetIndexState"
	MilvusService_GetIndexBuildProgress_FullMethodName       = "/milvus.proto.milvus.MilvusService/GetIndexBuildProgress"
	MilvusService_DropIndex_FullMethodName                   = "/milvus.proto.milvus.MilvusService/DropIndex"
	MilvusService_Insert_FullMethodName                      = "/milvus.proto.milvus.MilvusService/Insert"
	MilvusService_Delete_FullMethodName                      = "/milvus.proto.milvus.MilvusService/Delete"
	MilvusService_Upsert_FullMethodName                      = "/milvus.proto.milvus.MilvusService/Upsert"
	MilvusService_Search_FullMethodName                      = "/milvus.proto.milvus.MilvusService/Search"
	MilvusService_HybridSearch_FullMethodName                = "/milvus.proto.milvus.MilvusService/HybridSearch"
	MilvusService_Flush_FullMethodName                       = "/milvus.proto.milvus.MilvusService/Flush"
	MilvusService_Query_FullMethodName                       = "/milvus.proto.milvus.MilvusService/Query"
	MilvusService_CalcDistance_FullMethodName                = "/milvus.proto.milvus.MilvusService/CalcDistance"
	MilvusService_FlushAll_FullMethodName                    = "/milvus.proto.milvus.MilvusService/FlushAll"
	MilvusService_GetFlushState_FullMethodName               = "/milvus.proto.milvus.MilvusService/GetFlushState"
	MilvusService_GetFlushAllState_FullMethodName            = "/milvus.proto.milvus.MilvusService/GetFlushAllState"
	MilvusService_GetPersistentSegmentInfo_FullMethodName    = "/milvus.proto.milvus.MilvusService/GetPersistentSegmentInfo"
	MilvusService_GetQuerySegmentInfo_FullMethodName         = "/milvus.proto.milvus.MilvusService/GetQuerySegmentInfo"
	MilvusService_GetReplicas_FullMethodName                 = "/milvus.proto.milvus.MilvusService/GetReplicas"
	MilvusService_Dummy_FullMethodName                       = "/milvus.proto.milvus.MilvusService/Dummy"
	MilvusService_RegisterLink_FullMethodName                = "/milvus.proto.milvus.MilvusService/RegisterLink"
	MilvusService_GetMetrics_FullMethodName                  = "/milvus.proto.milvus.MilvusService/GetMetrics"
	MilvusService_GetComponentStates_FullMethodName          = "/milvus.proto.milvus.MilvusService/GetComponentStates"
	MilvusService_LoadBalance_FullMethodName                 = "/milvus.proto.milvus.MilvusService/LoadBalance"
	MilvusService_GetCompactionState_FullMethodName          = "/milvus.proto.milvus.MilvusService/GetCompactionState"
	MilvusService_ManualCompaction_FullMethodName            = "/milvus.proto.milvus.MilvusService/ManualCompaction"
	MilvusService_GetCompactionStateWithPlans_FullMethodName = "/milvus.proto.milvus.MilvusService/GetCompactionStateWithPlans"
	MilvusService_Import_FullMethodName                      = "/milvus.proto.milvus.MilvusService/Import"
	MilvusService_GetImportState_FullMethodName              = "/milvus.proto.milvus.MilvusService/GetImportState"
	MilvusService_ListImportTasks_FullMethodName             = "/milvus.proto.milvus.MilvusService/ListImportTasks"
	MilvusService_CreateCredential_FullMethodName            = "/milvus.proto.milvus.MilvusService/CreateCredential"
	MilvusService_UpdateCredential_FullMethodName            = "/milvus.proto.milvus.MilvusService/UpdateCredential"
	MilvusService_DeleteCredential_FullMethodName            = "/milvus.proto.milvus.MilvusService/DeleteCredential"
	MilvusService_ListCredUsers_FullMethodName               = "/milvus.proto.milvus.MilvusService/ListCredUsers"
	MilvusService_CreateRole_FullMethodName                  = "/milvus.proto.milvus.MilvusService/CreateRole"
	MilvusService_DropRole_FullMethodName                    = "/milvus.proto.milvus.MilvusService/DropRole"
	MilvusService_OperateUserRole_FullMethodName             = "/milvus.proto.milvus.MilvusService/OperateUserRole"
	MilvusService_SelectRole_FullMethodName                  = "/milvus.proto.milvus.MilvusService/SelectRole"
	MilvusService_SelectUser_FullMethodName                  = "/milvus.proto.milvus.MilvusService/SelectUser"
	MilvusService_OperatePrivilege_FullMethodName            = "/milvus.proto.milvus.MilvusService/OperatePrivilege"
	MilvusService_SelectGrant_FullMethodName                 = "/milvus.proto.milvus.MilvusService/SelectGrant"
	MilvusService_GetVersion_FullMethodName                  = "/milvus.proto.milvus.MilvusService/GetVersion"
	MilvusService_CheckHealth_FullMethodName                 = "/milvus.proto.milvus.MilvusService/CheckHealth"
	MilvusService_CreateResourceGroup_FullMethodName         = "/milvus.proto.milvus.MilvusService/CreateResourceGroup"
	MilvusService_DropResourceGroup_FullMethodName           = "/milvus.proto.milvus.MilvusService/DropResourceGroup"
	MilvusService_UpdateResourceGroups_FullMethodName        = "/milvus.proto.milvus.MilvusService/UpdateResourceGroups"
	MilvusService_TransferNode_FullMethodName                = "/milvus.proto.milvus.MilvusService/TransferNode"
	MilvusService_TransferReplica_FullMethodName             = "/milvus.proto.milvus.MilvusService/TransferReplica"
	MilvusService_ListResourceGroups_FullMethodName          = "/milvus.proto.milvus.MilvusService/ListResourceGroups"
	MilvusService_DescribeResourceGroup_FullMethodName       = "/milvus.proto.milvus.MilvusService/DescribeResourceGroup"
	MilvusService_RenameCollection_FullMethodName            = "/milvus.proto.milvus.MilvusService/RenameCollection"
	MilvusService_ListIndexedSegment_FullMethodName          = "/milvus.proto.milvus.MilvusService/ListIndexedSegment"
	MilvusService_DescribeSegmentIndexData_FullMethodName    = "/milvus.proto.milvus.MilvusService/DescribeSegmentIndexData"
	MilvusService_Connect_FullMethodName                     = "/milvus.proto.milvus.MilvusService/Connect"
	MilvusService_AllocTimestamp_FullMethodName              = "/milvus.proto.milvus.MilvusService/AllocTimestamp"
	MilvusService_CreateDatabase_FullMethodName              = "/milvus.proto.milvus.MilvusService/CreateDatabase"
	MilvusService_DropDatabase_FullMethodName                = "/milvus.proto.milvus.MilvusService/DropDatabase"
	MilvusService_ListDatabases_FullMethodName               = "/milvus.proto.milvus.MilvusService/ListDatabases"
	MilvusService_AlterDatabase_FullMethodName               = "/milvus.proto.milvus.MilvusService/AlterDatabase"
	MilvusService_DescribeDatabase_FullMethodName            = "/milvus.proto.milvus.MilvusService/DescribeDatabase"
	MilvusService_ReplicateMessage_FullMethodName            = "/milvus.proto.milvus.MilvusService/ReplicateMessage"
	MilvusService_BackupRBAC_FullMethodName                  = "/milvus.proto.milvus.MilvusService/BackupRBAC"
	MilvusService_RestoreRBAC_FullMethodName                 = "/milvus.proto.milvus.MilvusService/RestoreRBAC"
	MilvusService_CreatePrivilegeGroup_FullMethodName        = "/milvus.proto.milvus.MilvusService/CreatePrivilegeGroup"
	MilvusService_DropPrivilegeGroup_FullMethodName          = "/milvus.proto.milvus.MilvusService/DropPrivilegeGroup"
	MilvusService_ListPrivilegeGroups_FullMethodName         = "/milvus.proto.milvus.MilvusService/ListPrivilegeGroups"
	MilvusService_OperatePrivilegeGroup_FullMethodName       = "/milvus.proto.milvus.MilvusService/OperatePrivilegeGroup"
)

// MilvusServiceClient is the client API for MilvusService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MilvusServiceClient interface {
	CreateCollection(ctx context.Context, in *CreateCollectionRequest, opts ...grpc.CallOption) (*commonpb.Status, error)
	DropCollection(ctx context.Context, in *DropCollectionRequest, opts ...grpc.CallOption) (*commonpb.Status, error)
	HasCollection(ctx context.Context, in *HasCollectionRequest, opts ...grpc.CallOption) (*BoolResponse, error)
	LoadCollection(ctx context.Context, in *LoadCollectionRequest, opts ...grpc.CallOption) (*commonpb.Status, error)
	ReleaseCollection(ctx context.Context, in *ReleaseCollectionRequest, opts ...grpc.CallOption) (*commonpb.Status, error)
	DescribeCollection(ctx context.Context, in *DescribeCollectionRequest, opts ...grpc.CallOption) (*DescribeCollectionResponse, error)
	GetCollectionStatistics(ctx context.Context, in *GetCollectionStatisticsRequest, opts ...grpc.CallOption) (*GetCollectionStatisticsResponse, error)
	ShowCollections(ctx context.Context, in *ShowCollectionsRequest, opts ...grpc.CallOption) (*ShowCollectionsResponse, error)
	AlterCollection(ctx context.Context, in *AlterCollectionRequest, opts ...grpc.CallOption) (*commonpb.Status, error)
	AlterCollectionField(ctx context.Context, in *AlterCollectionFieldRequest, opts ...grpc.CallOption) (*commonpb.Status, error)
	CreatePartition(ctx context.Context, in *CreatePartitionRequest, opts ...grpc.CallOption) (*commonpb.Status, error)
	DropPartition(ctx context.Context, in *DropPartitionRequest, opts ...grpc.CallOption) (*commonpb.Status, error)
	HasPartition(ctx context.Context, in *HasPartitionRequest, opts ...grpc.CallOption) (*BoolResponse, error)
	LoadPartitions(ctx context.Context, in *LoadPartitionsRequest, opts ...grpc.CallOption) (*commonpb.Status, error)
	ReleasePartitions(ctx context.Context, in *ReleasePartitionsRequest, opts ...grpc.CallOption) (*commonpb.Status, error)
	GetPartitionStatistics(ctx context.Context, in *GetPartitionStatisticsRequest, opts ...grpc.CallOption) (*GetPartitionStatisticsResponse, error)
	ShowPartitions(ctx context.Context, in *ShowPartitionsRequest, opts ...grpc.CallOption) (*ShowPartitionsResponse, error)
	GetLoadingProgress(ctx context.Context, in *GetLoadingProgressRequest, opts ...grpc.CallOption) (*GetLoadingProgressResponse, error)
	GetLoadState(ctx context.Context, in *GetLoadStateRequest, opts ...grpc.CallOption) (*GetLoadStateResponse, error)
	CreateAlias(ctx context.Context, in *CreateAliasRequest, opts ...grpc.CallOption) (*commonpb.Status, error)
	DropAlias(ctx context.Context, in *DropAliasRequest, opts ...grpc.CallOption) (*commonpb.Status, error)
	AlterAlias(ctx context.Context, in *AlterAliasRequest, opts ...grpc.CallOption) (*commonpb.Status, error)
	DescribeAlias(ctx context.Context, in *DescribeAliasRequest, opts ...grpc.CallOption) (*DescribeAliasResponse, error)
	ListAliases(ctx context.Context, in *ListAliasesRequest, opts ...grpc.CallOption) (*ListAliasesResponse, error)
	CreateIndex(ctx context.Context, in *CreateIndexRequest, opts ...grpc.CallOption) (*commonpb.Status, error)
	AlterIndex(ctx context.Context, in *AlterIndexRequest, opts ...grpc.CallOption) (*commonpb.Status, error)
	DescribeIndex(ctx context.Context, in *DescribeIndexRequest, opts ...grpc.CallOption) (*DescribeIndexResponse, error)
	GetIndexStatistics(ctx context.Context, in *GetIndexStatisticsRequest, opts ...grpc.CallOption) (*GetIndexStatisticsResponse, error)
	// Deprecated: Do not use.
	// Deprecated: use DescribeIndex instead
	GetIndexState(ctx context.Context, in *GetIndexStateRequest, opts ...grpc.CallOption) (*GetIndexStateResponse, error)
	// Deprecated: Do not use.
	// Deprecated: use DescribeIndex instead
	GetIndexBuildProgress(ctx context.Context, in *GetIndexBuildProgressRequest, opts ...grpc.CallOption) (*GetIndexBuildProgressResponse, error)
	DropIndex(ctx context.Context, in *DropIndexRequest, opts ...grpc.CallOption) (*commonpb.Status, error)
	Insert(ctx context.Context, in *InsertRequest, opts ...grpc.CallOption) (*MutationResult, error)
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*MutationResult, error)
	Upsert(ctx context.Context, in *UpsertRequest, opts ...grpc.CallOption) (*MutationResult, error)
	Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResults, error)
	HybridSearch(ctx context.Context, in *HybridSearchRequest, opts ...grpc.CallOption) (*SearchResults, error)
	Flush(ctx context.Context, in *FlushRequest, opts ...grpc.CallOption) (*FlushResponse, error)
	Query(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*QueryResults, error)
	CalcDistance(ctx context.Context, in *CalcDistanceRequest, opts ...grpc.CallOption) (*CalcDistanceResults, error)
	FlushAll(ctx context.Context, in *FlushAllRequest, opts ...grpc.CallOption) (*FlushAllResponse, error)
	GetFlushState(ctx context.Context, in *GetFlushStateRequest, opts ...grpc.CallOption) (*GetFlushStateResponse, error)
	GetFlushAllState(ctx context.Context, in *GetFlushAllStateRequest, opts ...grpc.CallOption) (*GetFlushAllStateResponse, error)
	GetPersistentSegmentInfo(ctx context.Context, in *GetPersistentSegmentInfoRequest, opts ...grpc.CallOption) (*GetPersistentSegmentInfoResponse, error)
	GetQuerySegmentInfo(ctx context.Context, in *GetQuerySegmentInfoRequest, opts ...grpc.CallOption) (*GetQuerySegmentInfoResponse, error)
	GetReplicas(ctx context.Context, in *GetReplicasRequest, opts ...grpc.CallOption) (*GetReplicasResponse, error)
	Dummy(ctx context.Context, in *DummyRequest, opts ...grpc.CallOption) (*DummyResponse, error)
	// TODO: remove
	RegisterLink(ctx context.Context, in *RegisterLinkRequest, opts ...grpc.CallOption) (*RegisterLinkResponse, error)
	// https://wiki.lfaidata.foundation/display/MIL/MEP+8+--+Add+metrics+for+proxy
	GetMetrics(ctx context.Context, in *GetMetricsRequest, opts ...grpc.CallOption) (*GetMetricsResponse, error)
	GetComponentStates(ctx context.Context, in *GetComponentStatesRequest, opts ...grpc.CallOption) (*ComponentStates, error)
	LoadBalance(ctx context.Context, in *LoadBalanceRequest, opts ...grpc.CallOption) (*commonpb.Status, error)
	GetCompactionState(ctx context.Context, in *GetCompactionStateRequest, opts ...grpc.CallOption) (*GetCompactionStateResponse, error)
	ManualCompaction(ctx context.Context, in *ManualCompactionRequest, opts ...grpc.CallOption) (*ManualCompactionResponse, error)
	GetCompactionStateWithPlans(ctx context.Context, in *GetCompactionPlansRequest, opts ...grpc.CallOption) (*GetCompactionPlansResponse, error)
	// https://wiki.lfaidata.foundation/display/MIL/MEP+24+--+Support+bulk+load
	Import(ctx context.Context, in *ImportRequest, opts ...grpc.CallOption) (*ImportResponse, error)
	GetImportState(ctx context.Context, in *GetImportStateRequest, opts ...grpc.CallOption) (*GetImportStateResponse, error)
	ListImportTasks(ctx context.Context, in *ListImportTasksRequest, opts ...grpc.CallOption) (*ListImportTasksResponse, error)
	// https://wiki.lfaidata.foundation/display/MIL/MEP+27+--+Support+Basic+Authentication
	CreateCredential(ctx context.Context, in *CreateCredentialRequest, opts ...grpc.CallOption) (*commonpb.Status, error)
	UpdateCredential(ctx context.Context, in *UpdateCredentialRequest, opts ...grpc.CallOption) (*commonpb.Status, error)
	DeleteCredential(ctx context.Context, in *DeleteCredentialRequest, opts ...grpc.CallOption) (*commonpb.Status, error)
	ListCredUsers(ctx context.Context, in *ListCredUsersRequest, opts ...grpc.CallOption) (*ListCredUsersResponse, error)
	// https://wiki.lfaidata.foundation/display/MIL/MEP+29+--+Support+Role-Based+Access+Control
	CreateRole(ctx context.Context, in *CreateRoleRequest, opts ...grpc.CallOption) (*commonpb.Status, error)
	DropRole(ctx context.Context, in *DropRoleRequest, opts ...grpc.CallOption) (*commonpb.Status, error)
	OperateUserRole(ctx context.Context, in *OperateUserRoleRequest, opts ...grpc.CallOption) (*commonpb.Status, error)
	SelectRole(ctx context.Context, in *SelectRoleRequest, opts ...grpc.CallOption) (*SelectRoleResponse, error)
	SelectUser(ctx context.Context, in *SelectUserRequest, opts ...grpc.CallOption) (*SelectUserResponse, error)
	OperatePrivilege(ctx context.Context, in *OperatePrivilegeRequest, opts ...grpc.CallOption) (*commonpb.Status, error)
	SelectGrant(ctx context.Context, in *SelectGrantRequest, opts ...grpc.CallOption) (*SelectGrantResponse, error)
	GetVersion(ctx context.Context, in *GetVersionRequest, opts ...grpc.CallOption) (*GetVersionResponse, error)
	CheckHealth(ctx context.Context, in *CheckHealthRequest, opts ...grpc.CallOption) (*CheckHealthResponse, error)
	CreateResourceGroup(ctx context.Context, in *CreateResourceGroupRequest, opts ...grpc.CallOption) (*commonpb.Status, error)
	DropResourceGroup(ctx context.Context, in *DropResourceGroupRequest, opts ...grpc.CallOption) (*commonpb.Status, error)
	UpdateResourceGroups(ctx context.Context, in *UpdateResourceGroupsRequest, opts ...grpc.CallOption) (*commonpb.Status, error)
	TransferNode(ctx context.Context, in *TransferNodeRequest, opts ...grpc.CallOption) (*commonpb.Status, error)
	TransferReplica(ctx context.Context, in *TransferReplicaRequest, opts ...grpc.CallOption) (*commonpb.Status, error)
	ListResourceGroups(ctx context.Context, in *ListResourceGroupsRequest, opts ...grpc.CallOption) (*ListResourceGroupsResponse, error)
	DescribeResourceGroup(ctx context.Context, in *DescribeResourceGroupRequest, opts ...grpc.CallOption) (*DescribeResourceGroupResponse, error)
	RenameCollection(ctx context.Context, in *RenameCollectionRequest, opts ...grpc.CallOption) (*commonpb.Status, error)
	ListIndexedSegment(ctx context.Context, in *federpb.ListIndexedSegmentRequest, opts ...grpc.CallOption) (*federpb.ListIndexedSegmentResponse, error)
	DescribeSegmentIndexData(ctx context.Context, in *federpb.DescribeSegmentIndexDataRequest, opts ...grpc.CallOption) (*federpb.DescribeSegmentIndexDataResponse, error)
	Connect(ctx context.Context, in *ConnectRequest, opts ...grpc.CallOption) (*ConnectResponse, error)
	AllocTimestamp(ctx context.Context, in *AllocTimestampRequest, opts ...grpc.CallOption) (*AllocTimestampResponse, error)
	CreateDatabase(ctx context.Context, in *CreateDatabaseRequest, opts ...grpc.CallOption) (*commonpb.Status, error)
	DropDatabase(ctx context.Context, in *DropDatabaseRequest, opts ...grpc.CallOption) (*commonpb.Status, error)
	ListDatabases(ctx context.Context, in *ListDatabasesRequest, opts ...grpc.CallOption) (*ListDatabasesResponse, error)
	AlterDatabase(ctx context.Context, in *AlterDatabaseRequest, opts ...grpc.CallOption) (*commonpb.Status, error)
	DescribeDatabase(ctx context.Context, in *DescribeDatabaseRequest, opts ...grpc.CallOption) (*DescribeDatabaseResponse, error)
	ReplicateMessage(ctx context.Context, in *ReplicateMessageRequest, opts ...grpc.CallOption) (*ReplicateMessageResponse, error)
	BackupRBAC(ctx context.Context, in *BackupRBACMetaRequest, opts ...grpc.CallOption) (*BackupRBACMetaResponse, error)
	RestoreRBAC(ctx context.Context, in *RestoreRBACMetaRequest, opts ...grpc.CallOption) (*commonpb.Status, error)
	CreatePrivilegeGroup(ctx context.Context, in *CreatePrivilegeGroupRequest, opts ...grpc.CallOption) (*commonpb.Status, error)
	DropPrivilegeGroup(ctx context.Context, in *DropPrivilegeGroupRequest, opts ...grpc.CallOption) (*commonpb.Status, error)
	ListPrivilegeGroups(ctx context.Context, in *ListPrivilegeGroupsRequest, opts ...grpc.CallOption) (*ListPrivilegeGroupsResponse, error)
	OperatePrivilegeGroup(ctx context.Context, in *OperatePrivilegeGroupRequest, opts ...grpc.CallOption) (*commonpb.Status, error)
}

type milvusServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMilvusServiceClient(cc grpc.ClientConnInterface) MilvusServiceClient {
	return &milvusServiceClient{cc}
}

func (c *milvusServiceClient) CreateCollection(ctx context.Context, in *CreateCollectionRequest, opts ...grpc.CallOption) (*commonpb.Status, error) {
	out := new(commonpb.Status)
	err := c.cc.Invoke(ctx, MilvusService_CreateCollection_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) DropCollection(ctx context.Context, in *DropCollectionRequest, opts ...grpc.CallOption) (*commonpb.Status, error) {
	out := new(commonpb.Status)
	err := c.cc.Invoke(ctx, MilvusService_DropCollection_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) HasCollection(ctx context.Context, in *HasCollectionRequest, opts ...grpc.CallOption) (*BoolResponse, error) {
	out := new(BoolResponse)
	err := c.cc.Invoke(ctx, MilvusService_HasCollection_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) LoadCollection(ctx context.Context, in *LoadCollectionRequest, opts ...grpc.CallOption) (*commonpb.Status, error) {
	out := new(commonpb.Status)
	err := c.cc.Invoke(ctx, MilvusService_LoadCollection_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) ReleaseCollection(ctx context.Context, in *ReleaseCollectionRequest, opts ...grpc.CallOption) (*commonpb.Status, error) {
	out := new(commonpb.Status)
	err := c.cc.Invoke(ctx, MilvusService_ReleaseCollection_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) DescribeCollection(ctx context.Context, in *DescribeCollectionRequest, opts ...grpc.CallOption) (*DescribeCollectionResponse, error) {
	out := new(DescribeCollectionResponse)
	err := c.cc.Invoke(ctx, MilvusService_DescribeCollection_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) GetCollectionStatistics(ctx context.Context, in *GetCollectionStatisticsRequest, opts ...grpc.CallOption) (*GetCollectionStatisticsResponse, error) {
	out := new(GetCollectionStatisticsResponse)
	err := c.cc.Invoke(ctx, MilvusService_GetCollectionStatistics_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) ShowCollections(ctx context.Context, in *ShowCollectionsRequest, opts ...grpc.CallOption) (*ShowCollectionsResponse, error) {
	out := new(ShowCollectionsResponse)
	err := c.cc.Invoke(ctx, MilvusService_ShowCollections_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) AlterCollection(ctx context.Context, in *AlterCollectionRequest, opts ...grpc.CallOption) (*commonpb.Status, error) {
	out := new(commonpb.Status)
	err := c.cc.Invoke(ctx, MilvusService_AlterCollection_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) AlterCollectionField(ctx context.Context, in *AlterCollectionFieldRequest, opts ...grpc.CallOption) (*commonpb.Status, error) {
	out := new(commonpb.Status)
	err := c.cc.Invoke(ctx, MilvusService_AlterCollectionField_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) CreatePartition(ctx context.Context, in *CreatePartitionRequest, opts ...grpc.CallOption) (*commonpb.Status, error) {
	out := new(commonpb.Status)
	err := c.cc.Invoke(ctx, MilvusService_CreatePartition_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) DropPartition(ctx context.Context, in *DropPartitionRequest, opts ...grpc.CallOption) (*commonpb.Status, error) {
	out := new(commonpb.Status)
	err := c.cc.Invoke(ctx, MilvusService_DropPartition_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) HasPartition(ctx context.Context, in *HasPartitionRequest, opts ...grpc.CallOption) (*BoolResponse, error) {
	out := new(BoolResponse)
	err := c.cc.Invoke(ctx, MilvusService_HasPartition_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) LoadPartitions(ctx context.Context, in *LoadPartitionsRequest, opts ...grpc.CallOption) (*commonpb.Status, error) {
	out := new(commonpb.Status)
	err := c.cc.Invoke(ctx, MilvusService_LoadPartitions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) ReleasePartitions(ctx context.Context, in *ReleasePartitionsRequest, opts ...grpc.CallOption) (*commonpb.Status, error) {
	out := new(commonpb.Status)
	err := c.cc.Invoke(ctx, MilvusService_ReleasePartitions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) GetPartitionStatistics(ctx context.Context, in *GetPartitionStatisticsRequest, opts ...grpc.CallOption) (*GetPartitionStatisticsResponse, error) {
	out := new(GetPartitionStatisticsResponse)
	err := c.cc.Invoke(ctx, MilvusService_GetPartitionStatistics_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) ShowPartitions(ctx context.Context, in *ShowPartitionsRequest, opts ...grpc.CallOption) (*ShowPartitionsResponse, error) {
	out := new(ShowPartitionsResponse)
	err := c.cc.Invoke(ctx, MilvusService_ShowPartitions_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) GetLoadingProgress(ctx context.Context, in *GetLoadingProgressRequest, opts ...grpc.CallOption) (*GetLoadingProgressResponse, error) {
	out := new(GetLoadingProgressResponse)
	err := c.cc.Invoke(ctx, MilvusService_GetLoadingProgress_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) GetLoadState(ctx context.Context, in *GetLoadStateRequest, opts ...grpc.CallOption) (*GetLoadStateResponse, error) {
	out := new(GetLoadStateResponse)
	err := c.cc.Invoke(ctx, MilvusService_GetLoadState_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) CreateAlias(ctx context.Context, in *CreateAliasRequest, opts ...grpc.CallOption) (*commonpb.Status, error) {
	out := new(commonpb.Status)
	err := c.cc.Invoke(ctx, MilvusService_CreateAlias_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) DropAlias(ctx context.Context, in *DropAliasRequest, opts ...grpc.CallOption) (*commonpb.Status, error) {
	out := new(commonpb.Status)
	err := c.cc.Invoke(ctx, MilvusService_DropAlias_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) AlterAlias(ctx context.Context, in *AlterAliasRequest, opts ...grpc.CallOption) (*commonpb.Status, error) {
	out := new(commonpb.Status)
	err := c.cc.Invoke(ctx, MilvusService_AlterAlias_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) DescribeAlias(ctx context.Context, in *DescribeAliasRequest, opts ...grpc.CallOption) (*DescribeAliasResponse, error) {
	out := new(DescribeAliasResponse)
	err := c.cc.Invoke(ctx, MilvusService_DescribeAlias_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) ListAliases(ctx context.Context, in *ListAliasesRequest, opts ...grpc.CallOption) (*ListAliasesResponse, error) {
	out := new(ListAliasesResponse)
	err := c.cc.Invoke(ctx, MilvusService_ListAliases_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) CreateIndex(ctx context.Context, in *CreateIndexRequest, opts ...grpc.CallOption) (*commonpb.Status, error) {
	out := new(commonpb.Status)
	err := c.cc.Invoke(ctx, MilvusService_CreateIndex_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) AlterIndex(ctx context.Context, in *AlterIndexRequest, opts ...grpc.CallOption) (*commonpb.Status, error) {
	out := new(commonpb.Status)
	err := c.cc.Invoke(ctx, MilvusService_AlterIndex_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) DescribeIndex(ctx context.Context, in *DescribeIndexRequest, opts ...grpc.CallOption) (*DescribeIndexResponse, error) {
	out := new(DescribeIndexResponse)
	err := c.cc.Invoke(ctx, MilvusService_DescribeIndex_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) GetIndexStatistics(ctx context.Context, in *GetIndexStatisticsRequest, opts ...grpc.CallOption) (*GetIndexStatisticsResponse, error) {
	out := new(GetIndexStatisticsResponse)
	err := c.cc.Invoke(ctx, MilvusService_GetIndexStatistics_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *milvusServiceClient) GetIndexState(ctx context.Context, in *GetIndexStateRequest, opts ...grpc.CallOption) (*GetIndexStateResponse, error) {
	out := new(GetIndexStateResponse)
	err := c.cc.Invoke(ctx, MilvusService_GetIndexState_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *milvusServiceClient) GetIndexBuildProgress(ctx context.Context, in *GetIndexBuildProgressRequest, opts ...grpc.CallOption) (*GetIndexBuildProgressResponse, error) {
	out := new(GetIndexBuildProgressResponse)
	err := c.cc.Invoke(ctx, MilvusService_GetIndexBuildProgress_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) DropIndex(ctx context.Context, in *DropIndexRequest, opts ...grpc.CallOption) (*commonpb.Status, error) {
	out := new(commonpb.Status)
	err := c.cc.Invoke(ctx, MilvusService_DropIndex_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) Insert(ctx context.Context, in *InsertRequest, opts ...grpc.CallOption) (*MutationResult, error) {
	out := new(MutationResult)
	err := c.cc.Invoke(ctx, MilvusService_Insert_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*MutationResult, error) {
	out := new(MutationResult)
	err := c.cc.Invoke(ctx, MilvusService_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) Upsert(ctx context.Context, in *UpsertRequest, opts ...grpc.CallOption) (*MutationResult, error) {
	out := new(MutationResult)
	err := c.cc.Invoke(ctx, MilvusService_Upsert_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResults, error) {
	out := new(SearchResults)
	err := c.cc.Invoke(ctx, MilvusService_Search_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) HybridSearch(ctx context.Context, in *HybridSearchRequest, opts ...grpc.CallOption) (*SearchResults, error) {
	out := new(SearchResults)
	err := c.cc.Invoke(ctx, MilvusService_HybridSearch_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) Flush(ctx context.Context, in *FlushRequest, opts ...grpc.CallOption) (*FlushResponse, error) {
	out := new(FlushResponse)
	err := c.cc.Invoke(ctx, MilvusService_Flush_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) Query(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*QueryResults, error) {
	out := new(QueryResults)
	err := c.cc.Invoke(ctx, MilvusService_Query_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) CalcDistance(ctx context.Context, in *CalcDistanceRequest, opts ...grpc.CallOption) (*CalcDistanceResults, error) {
	out := new(CalcDistanceResults)
	err := c.cc.Invoke(ctx, MilvusService_CalcDistance_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) FlushAll(ctx context.Context, in *FlushAllRequest, opts ...grpc.CallOption) (*FlushAllResponse, error) {
	out := new(FlushAllResponse)
	err := c.cc.Invoke(ctx, MilvusService_FlushAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) GetFlushState(ctx context.Context, in *GetFlushStateRequest, opts ...grpc.CallOption) (*GetFlushStateResponse, error) {
	out := new(GetFlushStateResponse)
	err := c.cc.Invoke(ctx, MilvusService_GetFlushState_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) GetFlushAllState(ctx context.Context, in *GetFlushAllStateRequest, opts ...grpc.CallOption) (*GetFlushAllStateResponse, error) {
	out := new(GetFlushAllStateResponse)
	err := c.cc.Invoke(ctx, MilvusService_GetFlushAllState_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) GetPersistentSegmentInfo(ctx context.Context, in *GetPersistentSegmentInfoRequest, opts ...grpc.CallOption) (*GetPersistentSegmentInfoResponse, error) {
	out := new(GetPersistentSegmentInfoResponse)
	err := c.cc.Invoke(ctx, MilvusService_GetPersistentSegmentInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) GetQuerySegmentInfo(ctx context.Context, in *GetQuerySegmentInfoRequest, opts ...grpc.CallOption) (*GetQuerySegmentInfoResponse, error) {
	out := new(GetQuerySegmentInfoResponse)
	err := c.cc.Invoke(ctx, MilvusService_GetQuerySegmentInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) GetReplicas(ctx context.Context, in *GetReplicasRequest, opts ...grpc.CallOption) (*GetReplicasResponse, error) {
	out := new(GetReplicasResponse)
	err := c.cc.Invoke(ctx, MilvusService_GetReplicas_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) Dummy(ctx context.Context, in *DummyRequest, opts ...grpc.CallOption) (*DummyResponse, error) {
	out := new(DummyResponse)
	err := c.cc.Invoke(ctx, MilvusService_Dummy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) RegisterLink(ctx context.Context, in *RegisterLinkRequest, opts ...grpc.CallOption) (*RegisterLinkResponse, error) {
	out := new(RegisterLinkResponse)
	err := c.cc.Invoke(ctx, MilvusService_RegisterLink_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) GetMetrics(ctx context.Context, in *GetMetricsRequest, opts ...grpc.CallOption) (*GetMetricsResponse, error) {
	out := new(GetMetricsResponse)
	err := c.cc.Invoke(ctx, MilvusService_GetMetrics_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) GetComponentStates(ctx context.Context, in *GetComponentStatesRequest, opts ...grpc.CallOption) (*ComponentStates, error) {
	out := new(ComponentStates)
	err := c.cc.Invoke(ctx, MilvusService_GetComponentStates_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) LoadBalance(ctx context.Context, in *LoadBalanceRequest, opts ...grpc.CallOption) (*commonpb.Status, error) {
	out := new(commonpb.Status)
	err := c.cc.Invoke(ctx, MilvusService_LoadBalance_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) GetCompactionState(ctx context.Context, in *GetCompactionStateRequest, opts ...grpc.CallOption) (*GetCompactionStateResponse, error) {
	out := new(GetCompactionStateResponse)
	err := c.cc.Invoke(ctx, MilvusService_GetCompactionState_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) ManualCompaction(ctx context.Context, in *ManualCompactionRequest, opts ...grpc.CallOption) (*ManualCompactionResponse, error) {
	out := new(ManualCompactionResponse)
	err := c.cc.Invoke(ctx, MilvusService_ManualCompaction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) GetCompactionStateWithPlans(ctx context.Context, in *GetCompactionPlansRequest, opts ...grpc.CallOption) (*GetCompactionPlansResponse, error) {
	out := new(GetCompactionPlansResponse)
	err := c.cc.Invoke(ctx, MilvusService_GetCompactionStateWithPlans_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) Import(ctx context.Context, in *ImportRequest, opts ...grpc.CallOption) (*ImportResponse, error) {
	out := new(ImportResponse)
	err := c.cc.Invoke(ctx, MilvusService_Import_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) GetImportState(ctx context.Context, in *GetImportStateRequest, opts ...grpc.CallOption) (*GetImportStateResponse, error) {
	out := new(GetImportStateResponse)
	err := c.cc.Invoke(ctx, MilvusService_GetImportState_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) ListImportTasks(ctx context.Context, in *ListImportTasksRequest, opts ...grpc.CallOption) (*ListImportTasksResponse, error) {
	out := new(ListImportTasksResponse)
	err := c.cc.Invoke(ctx, MilvusService_ListImportTasks_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) CreateCredential(ctx context.Context, in *CreateCredentialRequest, opts ...grpc.CallOption) (*commonpb.Status, error) {
	out := new(commonpb.Status)
	err := c.cc.Invoke(ctx, MilvusService_CreateCredential_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) UpdateCredential(ctx context.Context, in *UpdateCredentialRequest, opts ...grpc.CallOption) (*commonpb.Status, error) {
	out := new(commonpb.Status)
	err := c.cc.Invoke(ctx, MilvusService_UpdateCredential_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) DeleteCredential(ctx context.Context, in *DeleteCredentialRequest, opts ...grpc.CallOption) (*commonpb.Status, error) {
	out := new(commonpb.Status)
	err := c.cc.Invoke(ctx, MilvusService_DeleteCredential_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) ListCredUsers(ctx context.Context, in *ListCredUsersRequest, opts ...grpc.CallOption) (*ListCredUsersResponse, error) {
	out := new(ListCredUsersResponse)
	err := c.cc.Invoke(ctx, MilvusService_ListCredUsers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) CreateRole(ctx context.Context, in *CreateRoleRequest, opts ...grpc.CallOption) (*commonpb.Status, error) {
	out := new(commonpb.Status)
	err := c.cc.Invoke(ctx, MilvusService_CreateRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) DropRole(ctx context.Context, in *DropRoleRequest, opts ...grpc.CallOption) (*commonpb.Status, error) {
	out := new(commonpb.Status)
	err := c.cc.Invoke(ctx, MilvusService_DropRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) OperateUserRole(ctx context.Context, in *OperateUserRoleRequest, opts ...grpc.CallOption) (*commonpb.Status, error) {
	out := new(commonpb.Status)
	err := c.cc.Invoke(ctx, MilvusService_OperateUserRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) SelectRole(ctx context.Context, in *SelectRoleRequest, opts ...grpc.CallOption) (*SelectRoleResponse, error) {
	out := new(SelectRoleResponse)
	err := c.cc.Invoke(ctx, MilvusService_SelectRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) SelectUser(ctx context.Context, in *SelectUserRequest, opts ...grpc.CallOption) (*SelectUserResponse, error) {
	out := new(SelectUserResponse)
	err := c.cc.Invoke(ctx, MilvusService_SelectUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) OperatePrivilege(ctx context.Context, in *OperatePrivilegeRequest, opts ...grpc.CallOption) (*commonpb.Status, error) {
	out := new(commonpb.Status)
	err := c.cc.Invoke(ctx, MilvusService_OperatePrivilege_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) SelectGrant(ctx context.Context, in *SelectGrantRequest, opts ...grpc.CallOption) (*SelectGrantResponse, error) {
	out := new(SelectGrantResponse)
	err := c.cc.Invoke(ctx, MilvusService_SelectGrant_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) GetVersion(ctx context.Context, in *GetVersionRequest, opts ...grpc.CallOption) (*GetVersionResponse, error) {
	out := new(GetVersionResponse)
	err := c.cc.Invoke(ctx, MilvusService_GetVersion_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) CheckHealth(ctx context.Context, in *CheckHealthRequest, opts ...grpc.CallOption) (*CheckHealthResponse, error) {
	out := new(CheckHealthResponse)
	err := c.cc.Invoke(ctx, MilvusService_CheckHealth_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) CreateResourceGroup(ctx context.Context, in *CreateResourceGroupRequest, opts ...grpc.CallOption) (*commonpb.Status, error) {
	out := new(commonpb.Status)
	err := c.cc.Invoke(ctx, MilvusService_CreateResourceGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) DropResourceGroup(ctx context.Context, in *DropResourceGroupRequest, opts ...grpc.CallOption) (*commonpb.Status, error) {
	out := new(commonpb.Status)
	err := c.cc.Invoke(ctx, MilvusService_DropResourceGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) UpdateResourceGroups(ctx context.Context, in *UpdateResourceGroupsRequest, opts ...grpc.CallOption) (*commonpb.Status, error) {
	out := new(commonpb.Status)
	err := c.cc.Invoke(ctx, MilvusService_UpdateResourceGroups_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) TransferNode(ctx context.Context, in *TransferNodeRequest, opts ...grpc.CallOption) (*commonpb.Status, error) {
	out := new(commonpb.Status)
	err := c.cc.Invoke(ctx, MilvusService_TransferNode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) TransferReplica(ctx context.Context, in *TransferReplicaRequest, opts ...grpc.CallOption) (*commonpb.Status, error) {
	out := new(commonpb.Status)
	err := c.cc.Invoke(ctx, MilvusService_TransferReplica_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) ListResourceGroups(ctx context.Context, in *ListResourceGroupsRequest, opts ...grpc.CallOption) (*ListResourceGroupsResponse, error) {
	out := new(ListResourceGroupsResponse)
	err := c.cc.Invoke(ctx, MilvusService_ListResourceGroups_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) DescribeResourceGroup(ctx context.Context, in *DescribeResourceGroupRequest, opts ...grpc.CallOption) (*DescribeResourceGroupResponse, error) {
	out := new(DescribeResourceGroupResponse)
	err := c.cc.Invoke(ctx, MilvusService_DescribeResourceGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) RenameCollection(ctx context.Context, in *RenameCollectionRequest, opts ...grpc.CallOption) (*commonpb.Status, error) {
	out := new(commonpb.Status)
	err := c.cc.Invoke(ctx, MilvusService_RenameCollection_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) ListIndexedSegment(ctx context.Context, in *federpb.ListIndexedSegmentRequest, opts ...grpc.CallOption) (*federpb.ListIndexedSegmentResponse, error) {
	out := new(federpb.ListIndexedSegmentResponse)
	err := c.cc.Invoke(ctx, MilvusService_ListIndexedSegment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) DescribeSegmentIndexData(ctx context.Context, in *federpb.DescribeSegmentIndexDataRequest, opts ...grpc.CallOption) (*federpb.DescribeSegmentIndexDataResponse, error) {
	out := new(federpb.DescribeSegmentIndexDataResponse)
	err := c.cc.Invoke(ctx, MilvusService_DescribeSegmentIndexData_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) Connect(ctx context.Context, in *ConnectRequest, opts ...grpc.CallOption) (*ConnectResponse, error) {
	out := new(ConnectResponse)
	err := c.cc.Invoke(ctx, MilvusService_Connect_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) AllocTimestamp(ctx context.Context, in *AllocTimestampRequest, opts ...grpc.CallOption) (*AllocTimestampResponse, error) {
	out := new(AllocTimestampResponse)
	err := c.cc.Invoke(ctx, MilvusService_AllocTimestamp_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) CreateDatabase(ctx context.Context, in *CreateDatabaseRequest, opts ...grpc.CallOption) (*commonpb.Status, error) {
	out := new(commonpb.Status)
	err := c.cc.Invoke(ctx, MilvusService_CreateDatabase_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) DropDatabase(ctx context.Context, in *DropDatabaseRequest, opts ...grpc.CallOption) (*commonpb.Status, error) {
	out := new(commonpb.Status)
	err := c.cc.Invoke(ctx, MilvusService_DropDatabase_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) ListDatabases(ctx context.Context, in *ListDatabasesRequest, opts ...grpc.CallOption) (*ListDatabasesResponse, error) {
	out := new(ListDatabasesResponse)
	err := c.cc.Invoke(ctx, MilvusService_ListDatabases_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) AlterDatabase(ctx context.Context, in *AlterDatabaseRequest, opts ...grpc.CallOption) (*commonpb.Status, error) {
	out := new(commonpb.Status)
	err := c.cc.Invoke(ctx, MilvusService_AlterDatabase_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) DescribeDatabase(ctx context.Context, in *DescribeDatabaseRequest, opts ...grpc.CallOption) (*DescribeDatabaseResponse, error) {
	out := new(DescribeDatabaseResponse)
	err := c.cc.Invoke(ctx, MilvusService_DescribeDatabase_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) ReplicateMessage(ctx context.Context, in *ReplicateMessageRequest, opts ...grpc.CallOption) (*ReplicateMessageResponse, error) {
	out := new(ReplicateMessageResponse)
	err := c.cc.Invoke(ctx, MilvusService_ReplicateMessage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) BackupRBAC(ctx context.Context, in *BackupRBACMetaRequest, opts ...grpc.CallOption) (*BackupRBACMetaResponse, error) {
	out := new(BackupRBACMetaResponse)
	err := c.cc.Invoke(ctx, MilvusService_BackupRBAC_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) RestoreRBAC(ctx context.Context, in *RestoreRBACMetaRequest, opts ...grpc.CallOption) (*commonpb.Status, error) {
	out := new(commonpb.Status)
	err := c.cc.Invoke(ctx, MilvusService_RestoreRBAC_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) CreatePrivilegeGroup(ctx context.Context, in *CreatePrivilegeGroupRequest, opts ...grpc.CallOption) (*commonpb.Status, error) {
	out := new(commonpb.Status)
	err := c.cc.Invoke(ctx, MilvusService_CreatePrivilegeGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) DropPrivilegeGroup(ctx context.Context, in *DropPrivilegeGroupRequest, opts ...grpc.CallOption) (*commonpb.Status, error) {
	out := new(commonpb.Status)
	err := c.cc.Invoke(ctx, MilvusService_DropPrivilegeGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) ListPrivilegeGroups(ctx context.Context, in *ListPrivilegeGroupsRequest, opts ...grpc.CallOption) (*ListPrivilegeGroupsResponse, error) {
	out := new(ListPrivilegeGroupsResponse)
	err := c.cc.Invoke(ctx, MilvusService_ListPrivilegeGroups_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) OperatePrivilegeGroup(ctx context.Context, in *OperatePrivilegeGroupRequest, opts ...grpc.CallOption) (*commonpb.Status, error) {
	out := new(commonpb.Status)
	err := c.cc.Invoke(ctx, MilvusService_OperatePrivilegeGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MilvusServiceServer is the server API for MilvusService service.
// All implementations should embed UnimplementedMilvusServiceServer
// for forward compatibility
type MilvusServiceServer interface {
	CreateCollection(context.Context, *CreateCollectionRequest) (*commonpb.Status, error)
	DropCollection(context.Context, *DropCollectionRequest) (*commonpb.Status, error)
	HasCollection(context.Context, *HasCollectionRequest) (*BoolResponse, error)
	LoadCollection(context.Context, *LoadCollectionRequest) (*commonpb.Status, error)
	ReleaseCollection(context.Context, *ReleaseCollectionRequest) (*commonpb.Status, error)
	DescribeCollection(context.Context, *DescribeCollectionRequest) (*DescribeCollectionResponse, error)
	GetCollectionStatistics(context.Context, *GetCollectionStatisticsRequest) (*GetCollectionStatisticsResponse, error)
	ShowCollections(context.Context, *ShowCollectionsRequest) (*ShowCollectionsResponse, error)
	AlterCollection(context.Context, *AlterCollectionRequest) (*commonpb.Status, error)
	AlterCollectionField(context.Context, *AlterCollectionFieldRequest) (*commonpb.Status, error)
	CreatePartition(context.Context, *CreatePartitionRequest) (*commonpb.Status, error)
	DropPartition(context.Context, *DropPartitionRequest) (*commonpb.Status, error)
	HasPartition(context.Context, *HasPartitionRequest) (*BoolResponse, error)
	LoadPartitions(context.Context, *LoadPartitionsRequest) (*commonpb.Status, error)
	ReleasePartitions(context.Context, *ReleasePartitionsRequest) (*commonpb.Status, error)
	GetPartitionStatistics(context.Context, *GetPartitionStatisticsRequest) (*GetPartitionStatisticsResponse, error)
	ShowPartitions(context.Context, *ShowPartitionsRequest) (*ShowPartitionsResponse, error)
	GetLoadingProgress(context.Context, *GetLoadingProgressRequest) (*GetLoadingProgressResponse, error)
	GetLoadState(context.Context, *GetLoadStateRequest) (*GetLoadStateResponse, error)
	CreateAlias(context.Context, *CreateAliasRequest) (*commonpb.Status, error)
	DropAlias(context.Context, *DropAliasRequest) (*commonpb.Status, error)
	AlterAlias(context.Context, *AlterAliasRequest) (*commonpb.Status, error)
	DescribeAlias(context.Context, *DescribeAliasRequest) (*DescribeAliasResponse, error)
	ListAliases(context.Context, *ListAliasesRequest) (*ListAliasesResponse, error)
	CreateIndex(context.Context, *CreateIndexRequest) (*commonpb.Status, error)
	AlterIndex(context.Context, *AlterIndexRequest) (*commonpb.Status, error)
	DescribeIndex(context.Context, *DescribeIndexRequest) (*DescribeIndexResponse, error)
	GetIndexStatistics(context.Context, *GetIndexStatisticsRequest) (*GetIndexStatisticsResponse, error)
	// Deprecated: Do not use.
	// Deprecated: use DescribeIndex instead
	GetIndexState(context.Context, *GetIndexStateRequest) (*GetIndexStateResponse, error)
	// Deprecated: Do not use.
	// Deprecated: use DescribeIndex instead
	GetIndexBuildProgress(context.Context, *GetIndexBuildProgressRequest) (*GetIndexBuildProgressResponse, error)
	DropIndex(context.Context, *DropIndexRequest) (*commonpb.Status, error)
	Insert(context.Context, *InsertRequest) (*MutationResult, error)
	Delete(context.Context, *DeleteRequest) (*MutationResult, error)
	Upsert(context.Context, *UpsertRequest) (*MutationResult, error)
	Search(context.Context, *SearchRequest) (*SearchResults, error)
	HybridSearch(context.Context, *HybridSearchRequest) (*SearchResults, error)
	Flush(context.Context, *FlushRequest) (*FlushResponse, error)
	Query(context.Context, *QueryRequest) (*QueryResults, error)
	CalcDistance(context.Context, *CalcDistanceRequest) (*CalcDistanceResults, error)
	FlushAll(context.Context, *FlushAllRequest) (*FlushAllResponse, error)
	GetFlushState(context.Context, *GetFlushStateRequest) (*GetFlushStateResponse, error)
	GetFlushAllState(context.Context, *GetFlushAllStateRequest) (*GetFlushAllStateResponse, error)
	GetPersistentSegmentInfo(context.Context, *GetPersistentSegmentInfoRequest) (*GetPersistentSegmentInfoResponse, error)
	GetQuerySegmentInfo(context.Context, *GetQuerySegmentInfoRequest) (*GetQuerySegmentInfoResponse, error)
	GetReplicas(context.Context, *GetReplicasRequest) (*GetReplicasResponse, error)
	Dummy(context.Context, *DummyRequest) (*DummyResponse, error)
	// TODO: remove
	RegisterLink(context.Context, *RegisterLinkRequest) (*RegisterLinkResponse, error)
	// https://wiki.lfaidata.foundation/display/MIL/MEP+8+--+Add+metrics+for+proxy
	GetMetrics(context.Context, *GetMetricsRequest) (*GetMetricsResponse, error)
	GetComponentStates(context.Context, *GetComponentStatesRequest) (*ComponentStates, error)
	LoadBalance(context.Context, *LoadBalanceRequest) (*commonpb.Status, error)
	GetCompactionState(context.Context, *GetCompactionStateRequest) (*GetCompactionStateResponse, error)
	ManualCompaction(context.Context, *ManualCompactionRequest) (*ManualCompactionResponse, error)
	GetCompactionStateWithPlans(context.Context, *GetCompactionPlansRequest) (*GetCompactionPlansResponse, error)
	// https://wiki.lfaidata.foundation/display/MIL/MEP+24+--+Support+bulk+load
	Import(context.Context, *ImportRequest) (*ImportResponse, error)
	GetImportState(context.Context, *GetImportStateRequest) (*GetImportStateResponse, error)
	ListImportTasks(context.Context, *ListImportTasksRequest) (*ListImportTasksResponse, error)
	// https://wiki.lfaidata.foundation/display/MIL/MEP+27+--+Support+Basic+Authentication
	CreateCredential(context.Context, *CreateCredentialRequest) (*commonpb.Status, error)
	UpdateCredential(context.Context, *UpdateCredentialRequest) (*commonpb.Status, error)
	DeleteCredential(context.Context, *DeleteCredentialRequest) (*commonpb.Status, error)
	ListCredUsers(context.Context, *ListCredUsersRequest) (*ListCredUsersResponse, error)
	// https://wiki.lfaidata.foundation/display/MIL/MEP+29+--+Support+Role-Based+Access+Control
	CreateRole(context.Context, *CreateRoleRequest) (*commonpb.Status, error)
	DropRole(context.Context, *DropRoleRequest) (*commonpb.Status, error)
	OperateUserRole(context.Context, *OperateUserRoleRequest) (*commonpb.Status, error)
	SelectRole(context.Context, *SelectRoleRequest) (*SelectRoleResponse, error)
	SelectUser(context.Context, *SelectUserRequest) (*SelectUserResponse, error)
	OperatePrivilege(context.Context, *OperatePrivilegeRequest) (*commonpb.Status, error)
	SelectGrant(context.Context, *SelectGrantRequest) (*SelectGrantResponse, error)
	GetVersion(context.Context, *GetVersionRequest) (*GetVersionResponse, error)
	CheckHealth(context.Context, *CheckHealthRequest) (*CheckHealthResponse, error)
	CreateResourceGroup(context.Context, *CreateResourceGroupRequest) (*commonpb.Status, error)
	DropResourceGroup(context.Context, *DropResourceGroupRequest) (*commonpb.Status, error)
	UpdateResourceGroups(context.Context, *UpdateResourceGroupsRequest) (*commonpb.Status, error)
	TransferNode(context.Context, *TransferNodeRequest) (*commonpb.Status, error)
	TransferReplica(context.Context, *TransferReplicaRequest) (*commonpb.Status, error)
	ListResourceGroups(context.Context, *ListResourceGroupsRequest) (*ListResourceGroupsResponse, error)
	DescribeResourceGroup(context.Context, *DescribeResourceGroupRequest) (*DescribeResourceGroupResponse, error)
	RenameCollection(context.Context, *RenameCollectionRequest) (*commonpb.Status, error)
	ListIndexedSegment(context.Context, *federpb.ListIndexedSegmentRequest) (*federpb.ListIndexedSegmentResponse, error)
	DescribeSegmentIndexData(context.Context, *federpb.DescribeSegmentIndexDataRequest) (*federpb.DescribeSegmentIndexDataResponse, error)
	Connect(context.Context, *ConnectRequest) (*ConnectResponse, error)
	AllocTimestamp(context.Context, *AllocTimestampRequest) (*AllocTimestampResponse, error)
	CreateDatabase(context.Context, *CreateDatabaseRequest) (*commonpb.Status, error)
	DropDatabase(context.Context, *DropDatabaseRequest) (*commonpb.Status, error)
	ListDatabases(context.Context, *ListDatabasesRequest) (*ListDatabasesResponse, error)
	AlterDatabase(context.Context, *AlterDatabaseRequest) (*commonpb.Status, error)
	DescribeDatabase(context.Context, *DescribeDatabaseRequest) (*DescribeDatabaseResponse, error)
	ReplicateMessage(context.Context, *ReplicateMessageRequest) (*ReplicateMessageResponse, error)
	BackupRBAC(context.Context, *BackupRBACMetaRequest) (*BackupRBACMetaResponse, error)
	RestoreRBAC(context.Context, *RestoreRBACMetaRequest) (*commonpb.Status, error)
	CreatePrivilegeGroup(context.Context, *CreatePrivilegeGroupRequest) (*commonpb.Status, error)
	DropPrivilegeGroup(context.Context, *DropPrivilegeGroupRequest) (*commonpb.Status, error)
	ListPrivilegeGroups(context.Context, *ListPrivilegeGroupsRequest) (*ListPrivilegeGroupsResponse, error)
	OperatePrivilegeGroup(context.Context, *OperatePrivilegeGroupRequest) (*commonpb.Status, error)
}

// UnimplementedMilvusServiceServer should be embedded to have forward compatible implementations.
type UnimplementedMilvusServiceServer struct {
}

func (UnimplementedMilvusServiceServer) CreateCollection(context.Context, *CreateCollectionRequest) (*commonpb.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCollection not implemented")
}
func (UnimplementedMilvusServiceServer) DropCollection(context.Context, *DropCollectionRequest) (*commonpb.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DropCollection not implemented")
}
func (UnimplementedMilvusServiceServer) HasCollection(context.Context, *HasCollectionRequest) (*BoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HasCollection not implemented")
}
func (UnimplementedMilvusServiceServer) LoadCollection(context.Context, *LoadCollectionRequest) (*commonpb.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoadCollection not implemented")
}
func (UnimplementedMilvusServiceServer) ReleaseCollection(context.Context, *ReleaseCollectionRequest) (*commonpb.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReleaseCollection not implemented")
}
func (UnimplementedMilvusServiceServer) DescribeCollection(context.Context, *DescribeCollectionRequest) (*DescribeCollectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeCollection not implemented")
}
func (UnimplementedMilvusServiceServer) GetCollectionStatistics(context.Context, *GetCollectionStatisticsRequest) (*GetCollectionStatisticsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCollectionStatistics not implemented")
}
func (UnimplementedMilvusServiceServer) ShowCollections(context.Context, *ShowCollectionsRequest) (*ShowCollectionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowCollections not implemented")
}
func (UnimplementedMilvusServiceServer) AlterCollection(context.Context, *AlterCollectionRequest) (*commonpb.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AlterCollection not implemented")
}
func (UnimplementedMilvusServiceServer) AlterCollectionField(context.Context, *AlterCollectionFieldRequest) (*commonpb.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AlterCollectionField not implemented")
}
func (UnimplementedMilvusServiceServer) CreatePartition(context.Context, *CreatePartitionRequest) (*commonpb.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePartition not implemented")
}
func (UnimplementedMilvusServiceServer) DropPartition(context.Context, *DropPartitionRequest) (*commonpb.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DropPartition not implemented")
}
func (UnimplementedMilvusServiceServer) HasPartition(context.Context, *HasPartitionRequest) (*BoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HasPartition not implemented")
}
func (UnimplementedMilvusServiceServer) LoadPartitions(context.Context, *LoadPartitionsRequest) (*commonpb.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoadPartitions not implemented")
}
func (UnimplementedMilvusServiceServer) ReleasePartitions(context.Context, *ReleasePartitionsRequest) (*commonpb.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReleasePartitions not implemented")
}
func (UnimplementedMilvusServiceServer) GetPartitionStatistics(context.Context, *GetPartitionStatisticsRequest) (*GetPartitionStatisticsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPartitionStatistics not implemented")
}
func (UnimplementedMilvusServiceServer) ShowPartitions(context.Context, *ShowPartitionsRequest) (*ShowPartitionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowPartitions not implemented")
}
func (UnimplementedMilvusServiceServer) GetLoadingProgress(context.Context, *GetLoadingProgressRequest) (*GetLoadingProgressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLoadingProgress not implemented")
}
func (UnimplementedMilvusServiceServer) GetLoadState(context.Context, *GetLoadStateRequest) (*GetLoadStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLoadState not implemented")
}
func (UnimplementedMilvusServiceServer) CreateAlias(context.Context, *CreateAliasRequest) (*commonpb.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAlias not implemented")
}
func (UnimplementedMilvusServiceServer) DropAlias(context.Context, *DropAliasRequest) (*commonpb.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DropAlias not implemented")
}
func (UnimplementedMilvusServiceServer) AlterAlias(context.Context, *AlterAliasRequest) (*commonpb.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AlterAlias not implemented")
}
func (UnimplementedMilvusServiceServer) DescribeAlias(context.Context, *DescribeAliasRequest) (*DescribeAliasResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeAlias not implemented")
}
func (UnimplementedMilvusServiceServer) ListAliases(context.Context, *ListAliasesRequest) (*ListAliasesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAliases not implemented")
}
func (UnimplementedMilvusServiceServer) CreateIndex(context.Context, *CreateIndexRequest) (*commonpb.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateIndex not implemented")
}
func (UnimplementedMilvusServiceServer) AlterIndex(context.Context, *AlterIndexRequest) (*commonpb.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AlterIndex not implemented")
}
func (UnimplementedMilvusServiceServer) DescribeIndex(context.Context, *DescribeIndexRequest) (*DescribeIndexResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeIndex not implemented")
}
func (UnimplementedMilvusServiceServer) GetIndexStatistics(context.Context, *GetIndexStatisticsRequest) (*GetIndexStatisticsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIndexStatistics not implemented")
}
func (UnimplementedMilvusServiceServer) GetIndexState(context.Context, *GetIndexStateRequest) (*GetIndexStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIndexState not implemented")
}
func (UnimplementedMilvusServiceServer) GetIndexBuildProgress(context.Context, *GetIndexBuildProgressRequest) (*GetIndexBuildProgressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIndexBuildProgress not implemented")
}
func (UnimplementedMilvusServiceServer) DropIndex(context.Context, *DropIndexRequest) (*commonpb.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DropIndex not implemented")
}
func (UnimplementedMilvusServiceServer) Insert(context.Context, *InsertRequest) (*MutationResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Insert not implemented")
}
func (UnimplementedMilvusServiceServer) Delete(context.Context, *DeleteRequest) (*MutationResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedMilvusServiceServer) Upsert(context.Context, *UpsertRequest) (*MutationResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Upsert not implemented")
}
func (UnimplementedMilvusServiceServer) Search(context.Context, *SearchRequest) (*SearchResults, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Search not implemented")
}
func (UnimplementedMilvusServiceServer) HybridSearch(context.Context, *HybridSearchRequest) (*SearchResults, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HybridSearch not implemented")
}
func (UnimplementedMilvusServiceServer) Flush(context.Context, *FlushRequest) (*FlushResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Flush not implemented")
}
func (UnimplementedMilvusServiceServer) Query(context.Context, *QueryRequest) (*QueryResults, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Query not implemented")
}
func (UnimplementedMilvusServiceServer) CalcDistance(context.Context, *CalcDistanceRequest) (*CalcDistanceResults, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CalcDistance not implemented")
}
func (UnimplementedMilvusServiceServer) FlushAll(context.Context, *FlushAllRequest) (*FlushAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FlushAll not implemented")
}
func (UnimplementedMilvusServiceServer) GetFlushState(context.Context, *GetFlushStateRequest) (*GetFlushStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFlushState not implemented")
}
func (UnimplementedMilvusServiceServer) GetFlushAllState(context.Context, *GetFlushAllStateRequest) (*GetFlushAllStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFlushAllState not implemented")
}
func (UnimplementedMilvusServiceServer) GetPersistentSegmentInfo(context.Context, *GetPersistentSegmentInfoRequest) (*GetPersistentSegmentInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPersistentSegmentInfo not implemented")
}
func (UnimplementedMilvusServiceServer) GetQuerySegmentInfo(context.Context, *GetQuerySegmentInfoRequest) (*GetQuerySegmentInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQuerySegmentInfo not implemented")
}
func (UnimplementedMilvusServiceServer) GetReplicas(context.Context, *GetReplicasRequest) (*GetReplicasResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReplicas not implemented")
}
func (UnimplementedMilvusServiceServer) Dummy(context.Context, *DummyRequest) (*DummyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Dummy not implemented")
}
func (UnimplementedMilvusServiceServer) RegisterLink(context.Context, *RegisterLinkRequest) (*RegisterLinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterLink not implemented")
}
func (UnimplementedMilvusServiceServer) GetMetrics(context.Context, *GetMetricsRequest) (*GetMetricsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMetrics not implemented")
}
func (UnimplementedMilvusServiceServer) GetComponentStates(context.Context, *GetComponentStatesRequest) (*ComponentStates, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetComponentStates not implemented")
}
func (UnimplementedMilvusServiceServer) LoadBalance(context.Context, *LoadBalanceRequest) (*commonpb.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoadBalance not implemented")
}
func (UnimplementedMilvusServiceServer) GetCompactionState(context.Context, *GetCompactionStateRequest) (*GetCompactionStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCompactionState not implemented")
}
func (UnimplementedMilvusServiceServer) ManualCompaction(context.Context, *ManualCompactionRequest) (*ManualCompactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ManualCompaction not implemented")
}
func (UnimplementedMilvusServiceServer) GetCompactionStateWithPlans(context.Context, *GetCompactionPlansRequest) (*GetCompactionPlansResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCompactionStateWithPlans not implemented")
}
func (UnimplementedMilvusServiceServer) Import(context.Context, *ImportRequest) (*ImportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Import not implemented")
}
func (UnimplementedMilvusServiceServer) GetImportState(context.Context, *GetImportStateRequest) (*GetImportStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetImportState not implemented")
}
func (UnimplementedMilvusServiceServer) ListImportTasks(context.Context, *ListImportTasksRequest) (*ListImportTasksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListImportTasks not implemented")
}
func (UnimplementedMilvusServiceServer) CreateCredential(context.Context, *CreateCredentialRequest) (*commonpb.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCredential not implemented")
}
func (UnimplementedMilvusServiceServer) UpdateCredential(context.Context, *UpdateCredentialRequest) (*commonpb.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCredential not implemented")
}
func (UnimplementedMilvusServiceServer) DeleteCredential(context.Context, *DeleteCredentialRequest) (*commonpb.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCredential not implemented")
}
func (UnimplementedMilvusServiceServer) ListCredUsers(context.Context, *ListCredUsersRequest) (*ListCredUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCredUsers not implemented")
}
func (UnimplementedMilvusServiceServer) CreateRole(context.Context, *CreateRoleRequest) (*commonpb.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRole not implemented")
}
func (UnimplementedMilvusServiceServer) DropRole(context.Context, *DropRoleRequest) (*commonpb.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DropRole not implemented")
}
func (UnimplementedMilvusServiceServer) OperateUserRole(context.Context, *OperateUserRoleRequest) (*commonpb.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OperateUserRole not implemented")
}
func (UnimplementedMilvusServiceServer) SelectRole(context.Context, *SelectRoleRequest) (*SelectRoleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SelectRole not implemented")
}
func (UnimplementedMilvusServiceServer) SelectUser(context.Context, *SelectUserRequest) (*SelectUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SelectUser not implemented")
}
func (UnimplementedMilvusServiceServer) OperatePrivilege(context.Context, *OperatePrivilegeRequest) (*commonpb.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OperatePrivilege not implemented")
}
func (UnimplementedMilvusServiceServer) SelectGrant(context.Context, *SelectGrantRequest) (*SelectGrantResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SelectGrant not implemented")
}
func (UnimplementedMilvusServiceServer) GetVersion(context.Context, *GetVersionRequest) (*GetVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVersion not implemented")
}
func (UnimplementedMilvusServiceServer) CheckHealth(context.Context, *CheckHealthRequest) (*CheckHealthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckHealth not implemented")
}
func (UnimplementedMilvusServiceServer) CreateResourceGroup(context.Context, *CreateResourceGroupRequest) (*commonpb.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateResourceGroup not implemented")
}
func (UnimplementedMilvusServiceServer) DropResourceGroup(context.Context, *DropResourceGroupRequest) (*commonpb.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DropResourceGroup not implemented")
}
func (UnimplementedMilvusServiceServer) UpdateResourceGroups(context.Context, *UpdateResourceGroupsRequest) (*commonpb.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateResourceGroups not implemented")
}
func (UnimplementedMilvusServiceServer) TransferNode(context.Context, *TransferNodeRequest) (*commonpb.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransferNode not implemented")
}
func (UnimplementedMilvusServiceServer) TransferReplica(context.Context, *TransferReplicaRequest) (*commonpb.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransferReplica not implemented")
}
func (UnimplementedMilvusServiceServer) ListResourceGroups(context.Context, *ListResourceGroupsRequest) (*ListResourceGroupsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListResourceGroups not implemented")
}
func (UnimplementedMilvusServiceServer) DescribeResourceGroup(context.Context, *DescribeResourceGroupRequest) (*DescribeResourceGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeResourceGroup not implemented")
}
func (UnimplementedMilvusServiceServer) RenameCollection(context.Context, *RenameCollectionRequest) (*commonpb.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RenameCollection not implemented")
}
func (UnimplementedMilvusServiceServer) ListIndexedSegment(context.Context, *federpb.ListIndexedSegmentRequest) (*federpb.ListIndexedSegmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListIndexedSegment not implemented")
}
func (UnimplementedMilvusServiceServer) DescribeSegmentIndexData(context.Context, *federpb.DescribeSegmentIndexDataRequest) (*federpb.DescribeSegmentIndexDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeSegmentIndexData not implemented")
}
func (UnimplementedMilvusServiceServer) Connect(context.Context, *ConnectRequest) (*ConnectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Connect not implemented")
}
func (UnimplementedMilvusServiceServer) AllocTimestamp(context.Context, *AllocTimestampRequest) (*AllocTimestampResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllocTimestamp not implemented")
}
func (UnimplementedMilvusServiceServer) CreateDatabase(context.Context, *CreateDatabaseRequest) (*commonpb.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDatabase not implemented")
}
func (UnimplementedMilvusServiceServer) DropDatabase(context.Context, *DropDatabaseRequest) (*commonpb.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DropDatabase not implemented")
}
func (UnimplementedMilvusServiceServer) ListDatabases(context.Context, *ListDatabasesRequest) (*ListDatabasesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDatabases not implemented")
}
func (UnimplementedMilvusServiceServer) AlterDatabase(context.Context, *AlterDatabaseRequest) (*commonpb.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AlterDatabase not implemented")
}
func (UnimplementedMilvusServiceServer) DescribeDatabase(context.Context, *DescribeDatabaseRequest) (*DescribeDatabaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeDatabase not implemented")
}
func (UnimplementedMilvusServiceServer) ReplicateMessage(context.Context, *ReplicateMessageRequest) (*ReplicateMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReplicateMessage not implemented")
}
func (UnimplementedMilvusServiceServer) BackupRBAC(context.Context, *BackupRBACMetaRequest) (*BackupRBACMetaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BackupRBAC not implemented")
}
func (UnimplementedMilvusServiceServer) RestoreRBAC(context.Context, *RestoreRBACMetaRequest) (*commonpb.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestoreRBAC not implemented")
}
func (UnimplementedMilvusServiceServer) CreatePrivilegeGroup(context.Context, *CreatePrivilegeGroupRequest) (*commonpb.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePrivilegeGroup not implemented")
}
func (UnimplementedMilvusServiceServer) DropPrivilegeGroup(context.Context, *DropPrivilegeGroupRequest) (*commonpb.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DropPrivilegeGroup not implemented")
}
func (UnimplementedMilvusServiceServer) ListPrivilegeGroups(context.Context, *ListPrivilegeGroupsRequest) (*ListPrivilegeGroupsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPrivilegeGroups not implemented")
}
func (UnimplementedMilvusServiceServer) OperatePrivilegeGroup(context.Context, *OperatePrivilegeGroupRequest) (*commonpb.Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OperatePrivilegeGroup not implemented")
}

// UnsafeMilvusServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MilvusServiceServer will
// result in compilation errors.
type UnsafeMilvusServiceServer interface {
	mustEmbedUnimplementedMilvusServiceServer()
}

func RegisterMilvusServiceServer(s grpc.ServiceRegistrar, srv MilvusServiceServer) {
	s.RegisterService(&MilvusService_ServiceDesc, srv)
}

func _MilvusService_CreateCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCollectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).CreateCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MilvusService_CreateCollection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).CreateCollection(ctx, req.(*CreateCollectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_DropCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DropCollectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).DropCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MilvusService_DropCollection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).DropCollection(ctx, req.(*DropCollectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_HasCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HasCollectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).HasCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MilvusService_HasCollection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).HasCollection(ctx, req.(*HasCollectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_LoadCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoadCollectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).LoadCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MilvusService_LoadCollection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).LoadCollection(ctx, req.(*LoadCollectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_ReleaseCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReleaseCollectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).ReleaseCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MilvusService_ReleaseCollection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).ReleaseCollection(ctx, req.(*ReleaseCollectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_DescribeCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeCollectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).DescribeCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MilvusService_DescribeCollection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).DescribeCollection(ctx, req.(*DescribeCollectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_GetCollectionStatistics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCollectionStatisticsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).GetCollectionStatistics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MilvusService_GetCollectionStatistics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).GetCollectionStatistics(ctx, req.(*GetCollectionStatisticsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_ShowCollections_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShowCollectionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).ShowCollections(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MilvusService_ShowCollections_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).ShowCollections(ctx, req.(*ShowCollectionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_AlterCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlterCollectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).AlterCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MilvusService_AlterCollection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).AlterCollection(ctx, req.(*AlterCollectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_AlterCollectionField_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlterCollectionFieldRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).AlterCollectionField(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MilvusService_AlterCollectionField_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).AlterCollectionField(ctx, req.(*AlterCollectionFieldRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_CreatePartition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePartitionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).CreatePartition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MilvusService_CreatePartition_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).CreatePartition(ctx, req.(*CreatePartitionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_DropPartition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DropPartitionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).DropPartition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MilvusService_DropPartition_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).DropPartition(ctx, req.(*DropPartitionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_HasPartition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HasPartitionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).HasPartition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MilvusService_HasPartition_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).HasPartition(ctx, req.(*HasPartitionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_LoadPartitions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoadPartitionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).LoadPartitions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MilvusService_LoadPartitions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).LoadPartitions(ctx, req.(*LoadPartitionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_ReleasePartitions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReleasePartitionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).ReleasePartitions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MilvusService_ReleasePartitions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).ReleasePartitions(ctx, req.(*ReleasePartitionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_GetPartitionStatistics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPartitionStatisticsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).GetPartitionStatistics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MilvusService_GetPartitionStatistics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).GetPartitionStatistics(ctx, req.(*GetPartitionStatisticsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_ShowPartitions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShowPartitionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).ShowPartitions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MilvusService_ShowPartitions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).ShowPartitions(ctx, req.(*ShowPartitionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_GetLoadingProgress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLoadingProgressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).GetLoadingProgress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MilvusService_GetLoadingProgress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).GetLoadingProgress(ctx, req.(*GetLoadingProgressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_GetLoadState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLoadStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).GetLoadState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MilvusService_GetLoadState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).GetLoadState(ctx, req.(*GetLoadStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_CreateAlias_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAliasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).CreateAlias(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MilvusService_CreateAlias_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).CreateAlias(ctx, req.(*CreateAliasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_DropAlias_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DropAliasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).DropAlias(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MilvusService_DropAlias_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).DropAlias(ctx, req.(*DropAliasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_AlterAlias_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlterAliasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).AlterAlias(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MilvusService_AlterAlias_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).AlterAlias(ctx, req.(*AlterAliasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_DescribeAlias_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeAliasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).DescribeAlias(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MilvusService_DescribeAlias_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).DescribeAlias(ctx, req.(*DescribeAliasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_ListAliases_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAliasesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).ListAliases(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MilvusService_ListAliases_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).ListAliases(ctx, req.(*ListAliasesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_CreateIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateIndexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).CreateIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MilvusService_CreateIndex_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).CreateIndex(ctx, req.(*CreateIndexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_AlterIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlterIndexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).AlterIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MilvusService_AlterIndex_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).AlterIndex(ctx, req.(*AlterIndexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_DescribeIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeIndexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).DescribeIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MilvusService_DescribeIndex_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).DescribeIndex(ctx, req.(*DescribeIndexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_GetIndexStatistics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIndexStatisticsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).GetIndexStatistics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MilvusService_GetIndexStatistics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).GetIndexStatistics(ctx, req.(*GetIndexStatisticsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_GetIndexState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIndexStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).GetIndexState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MilvusService_GetIndexState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).GetIndexState(ctx, req.(*GetIndexStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_GetIndexBuildProgress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIndexBuildProgressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).GetIndexBuildProgress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MilvusService_GetIndexBuildProgress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).GetIndexBuildProgress(ctx, req.(*GetIndexBuildProgressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_DropIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DropIndexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).DropIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MilvusService_DropIndex_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).DropIndex(ctx, req.(*DropIndexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_Insert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).Insert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MilvusService_Insert_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).Insert(ctx, req.(*InsertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MilvusService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_Upsert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).Upsert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MilvusService_Upsert_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).Upsert(ctx, req.(*UpsertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).Search(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MilvusService_Search_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).Search(ctx, req.(*SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_HybridSearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HybridSearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).HybridSearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MilvusService_HybridSearch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).HybridSearch(ctx, req.(*HybridSearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_Flush_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FlushRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).Flush(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MilvusService_Flush_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).Flush(ctx, req.(*FlushRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_Query_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).Query(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MilvusService_Query_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).Query(ctx, req.(*QueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_CalcDistance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CalcDistanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).CalcDistance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MilvusService_CalcDistance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).CalcDistance(ctx, req.(*CalcDistanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_FlushAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FlushAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).FlushAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MilvusService_FlushAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).FlushAll(ctx, req.(*FlushAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_GetFlushState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFlushStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).GetFlushState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MilvusService_GetFlushState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).GetFlushState(ctx, req.(*GetFlushStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_GetFlushAllState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFlushAllStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).GetFlushAllState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MilvusService_GetFlushAllState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).GetFlushAllState(ctx, req.(*GetFlushAllStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_GetPersistentSegmentInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPersistentSegmentInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).GetPersistentSegmentInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MilvusService_GetPersistentSegmentInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).GetPersistentSegmentInfo(ctx, req.(*GetPersistentSegmentInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_GetQuerySegmentInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetQuerySegmentInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).GetQuerySegmentInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MilvusService_GetQuerySegmentInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).GetQuerySegmentInfo(ctx, req.(*GetQuerySegmentInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_GetReplicas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReplicasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).GetReplicas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MilvusService_GetReplicas_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).GetReplicas(ctx, req.(*GetReplicasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_Dummy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DummyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).Dummy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MilvusService_Dummy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).Dummy(ctx, req.(*DummyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_RegisterLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterLinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).RegisterLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MilvusService_RegisterLink_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).RegisterLink(ctx, req.(*RegisterLinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_GetMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).GetMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MilvusService_GetMetrics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).GetMetrics(ctx, req.(*GetMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_GetComponentStates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetComponentStatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).GetComponentStates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MilvusService_GetComponentStates_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).GetComponentStates(ctx, req.(*GetComponentStatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_LoadBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoadBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).LoadBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MilvusService_LoadBalance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).LoadBalance(ctx, req.(*LoadBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_GetCompactionState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCompactionStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).GetCompactionState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MilvusService_GetCompactionState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).GetCompactionState(ctx, req.(*GetCompactionStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_ManualCompaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ManualCompactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).ManualCompaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MilvusService_ManualCompaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).ManualCompaction(ctx, req.(*ManualCompactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_GetCompactionStateWithPlans_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCompactionPlansRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).GetCompactionStateWithPlans(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MilvusService_GetCompactionStateWithPlans_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).GetCompactionStateWithPlans(ctx, req.(*GetCompactionPlansRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_Import_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).Import(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MilvusService_Import_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).Import(ctx, req.(*ImportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_GetImportState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetImportStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).GetImportState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MilvusService_GetImportState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).GetImportState(ctx, req.(*GetImportStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_ListImportTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListImportTasksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).ListImportTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MilvusService_ListImportTasks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).ListImportTasks(ctx, req.(*ListImportTasksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_CreateCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCredentialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).CreateCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MilvusService_CreateCredential_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).CreateCredential(ctx, req.(*CreateCredentialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_UpdateCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCredentialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).UpdateCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MilvusService_UpdateCredential_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).UpdateCredential(ctx, req.(*UpdateCredentialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_DeleteCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCredentialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).DeleteCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MilvusService_DeleteCredential_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).DeleteCredential(ctx, req.(*DeleteCredentialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_ListCredUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCredUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).ListCredUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MilvusService_ListCredUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).ListCredUsers(ctx, req.(*ListCredUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_CreateRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).CreateRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MilvusService_CreateRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).CreateRole(ctx, req.(*CreateRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_DropRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DropRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).DropRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MilvusService_DropRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).DropRole(ctx, req.(*DropRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_OperateUserRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OperateUserRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).OperateUserRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MilvusService_OperateUserRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).OperateUserRole(ctx, req.(*OperateUserRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_SelectRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SelectRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).SelectRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MilvusService_SelectRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).SelectRole(ctx, req.(*SelectRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_SelectUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SelectUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).SelectUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MilvusService_SelectUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).SelectUser(ctx, req.(*SelectUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_OperatePrivilege_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OperatePrivilegeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).OperatePrivilege(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MilvusService_OperatePrivilege_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).OperatePrivilege(ctx, req.(*OperatePrivilegeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_SelectGrant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SelectGrantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).SelectGrant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MilvusService_SelectGrant_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).SelectGrant(ctx, req.(*SelectGrantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_GetVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).GetVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MilvusService_GetVersion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).GetVersion(ctx, req.(*GetVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_CheckHealth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckHealthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).CheckHealth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MilvusService_CheckHealth_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).CheckHealth(ctx, req.(*CheckHealthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_CreateResourceGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateResourceGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).CreateResourceGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MilvusService_CreateResourceGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).CreateResourceGroup(ctx, req.(*CreateResourceGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_DropResourceGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DropResourceGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).DropResourceGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MilvusService_DropResourceGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).DropResourceGroup(ctx, req.(*DropResourceGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_UpdateResourceGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateResourceGroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).UpdateResourceGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MilvusService_UpdateResourceGroups_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).UpdateResourceGroups(ctx, req.(*UpdateResourceGroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_TransferNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransferNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).TransferNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MilvusService_TransferNode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).TransferNode(ctx, req.(*TransferNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_TransferReplica_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransferReplicaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).TransferReplica(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MilvusService_TransferReplica_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).TransferReplica(ctx, req.(*TransferReplicaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_ListResourceGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListResourceGroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).ListResourceGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MilvusService_ListResourceGroups_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).ListResourceGroups(ctx, req.(*ListResourceGroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_DescribeResourceGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeResourceGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).DescribeResourceGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MilvusService_DescribeResourceGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).DescribeResourceGroup(ctx, req.(*DescribeResourceGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_RenameCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenameCollectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).RenameCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MilvusService_RenameCollection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).RenameCollection(ctx, req.(*RenameCollectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_ListIndexedSegment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(federpb.ListIndexedSegmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).ListIndexedSegment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MilvusService_ListIndexedSegment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).ListIndexedSegment(ctx, req.(*federpb.ListIndexedSegmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_DescribeSegmentIndexData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(federpb.DescribeSegmentIndexDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).DescribeSegmentIndexData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MilvusService_DescribeSegmentIndexData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).DescribeSegmentIndexData(ctx, req.(*federpb.DescribeSegmentIndexDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_Connect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).Connect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MilvusService_Connect_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).Connect(ctx, req.(*ConnectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_AllocTimestamp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AllocTimestampRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).AllocTimestamp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MilvusService_AllocTimestamp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).AllocTimestamp(ctx, req.(*AllocTimestampRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_CreateDatabase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDatabaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).CreateDatabase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MilvusService_CreateDatabase_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).CreateDatabase(ctx, req.(*CreateDatabaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_DropDatabase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DropDatabaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).DropDatabase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MilvusService_DropDatabase_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).DropDatabase(ctx, req.(*DropDatabaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_ListDatabases_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDatabasesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).ListDatabases(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MilvusService_ListDatabases_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).ListDatabases(ctx, req.(*ListDatabasesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_AlterDatabase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlterDatabaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).AlterDatabase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MilvusService_AlterDatabase_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).AlterDatabase(ctx, req.(*AlterDatabaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_DescribeDatabase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeDatabaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).DescribeDatabase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MilvusService_DescribeDatabase_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).DescribeDatabase(ctx, req.(*DescribeDatabaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_ReplicateMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReplicateMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).ReplicateMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MilvusService_ReplicateMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).ReplicateMessage(ctx, req.(*ReplicateMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_BackupRBAC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BackupRBACMetaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).BackupRBAC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MilvusService_BackupRBAC_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).BackupRBAC(ctx, req.(*BackupRBACMetaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_RestoreRBAC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RestoreRBACMetaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).RestoreRBAC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MilvusService_RestoreRBAC_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).RestoreRBAC(ctx, req.(*RestoreRBACMetaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_CreatePrivilegeGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePrivilegeGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).CreatePrivilegeGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MilvusService_CreatePrivilegeGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).CreatePrivilegeGroup(ctx, req.(*CreatePrivilegeGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_DropPrivilegeGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DropPrivilegeGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).DropPrivilegeGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MilvusService_DropPrivilegeGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).DropPrivilegeGroup(ctx, req.(*DropPrivilegeGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_ListPrivilegeGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPrivilegeGroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).ListPrivilegeGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MilvusService_ListPrivilegeGroups_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).ListPrivilegeGroups(ctx, req.(*ListPrivilegeGroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_OperatePrivilegeGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OperatePrivilegeGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).OperatePrivilegeGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MilvusService_OperatePrivilegeGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).OperatePrivilegeGroup(ctx, req.(*OperatePrivilegeGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MilvusService_ServiceDesc is the grpc.ServiceDesc for MilvusService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MilvusService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "milvus.proto.milvus.MilvusService",
	HandlerType: (*MilvusServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCollection",
			Handler:    _MilvusService_CreateCollection_Handler,
		},
		{
			MethodName: "DropCollection",
			Handler:    _MilvusService_DropCollection_Handler,
		},
		{
			MethodName: "HasCollection",
			Handler:    _MilvusService_HasCollection_Handler,
		},
		{
			MethodName: "LoadCollection",
			Handler:    _MilvusService_LoadCollection_Handler,
		},
		{
			MethodName: "ReleaseCollection",
			Handler:    _MilvusService_ReleaseCollection_Handler,
		},
		{
			MethodName: "DescribeCollection",
			Handler:    _MilvusService_DescribeCollection_Handler,
		},
		{
			MethodName: "GetCollectionStatistics",
			Handler:    _MilvusService_GetCollectionStatistics_Handler,
		},
		{
			MethodName: "ShowCollections",
			Handler:    _MilvusService_ShowCollections_Handler,
		},
		{
			MethodName: "AlterCollection",
			Handler:    _MilvusService_AlterCollection_Handler,
		},
		{
			MethodName: "AlterCollectionField",
			Handler:    _MilvusService_AlterCollectionField_Handler,
		},
		{
			MethodName: "CreatePartition",
			Handler:    _MilvusService_CreatePartition_Handler,
		},
		{
			MethodName: "DropPartition",
			Handler:    _MilvusService_DropPartition_Handler,
		},
		{
			MethodName: "HasPartition",
			Handler:    _MilvusService_HasPartition_Handler,
		},
		{
			MethodName: "LoadPartitions",
			Handler:    _MilvusService_LoadPartitions_Handler,
		},
		{
			MethodName: "ReleasePartitions",
			Handler:    _MilvusService_ReleasePartitions_Handler,
		},
		{
			MethodName: "GetPartitionStatistics",
			Handler:    _MilvusService_GetPartitionStatistics_Handler,
		},
		{
			MethodName: "ShowPartitions",
			Handler:    _MilvusService_ShowPartitions_Handler,
		},
		{
			MethodName: "GetLoadingProgress",
			Handler:    _MilvusService_GetLoadingProgress_Handler,
		},
		{
			MethodName: "GetLoadState",
			Handler:    _MilvusService_GetLoadState_Handler,
		},
		{
			MethodName: "CreateAlias",
			Handler:    _MilvusService_CreateAlias_Handler,
		},
		{
			MethodName: "DropAlias",
			Handler:    _MilvusService_DropAlias_Handler,
		},
		{
			MethodName: "AlterAlias",
			Handler:    _MilvusService_AlterAlias_Handler,
		},
		{
			MethodName: "DescribeAlias",
			Handler:    _MilvusService_DescribeAlias_Handler,
		},
		{
			MethodName: "ListAliases",
			Handler:    _MilvusService_ListAliases_Handler,
		},
		{
			MethodName: "CreateIndex",
			Handler:    _MilvusService_CreateIndex_Handler,
		},
		{
			MethodName: "AlterIndex",
			Handler:    _MilvusService_AlterIndex_Handler,
		},
		{
			MethodName: "DescribeIndex",
			Handler:    _MilvusService_DescribeIndex_Handler,
		},
		{
			MethodName: "GetIndexStatistics",
			Handler:    _MilvusService_GetIndexStatistics_Handler,
		},
		{
			MethodName: "GetIndexState",
			Handler:    _MilvusService_GetIndexState_Handler,
		},
		{
			MethodName: "GetIndexBuildProgress",
			Handler:    _MilvusService_GetIndexBuildProgress_Handler,
		},
		{
			MethodName: "DropIndex",
			Handler:    _MilvusService_DropIndex_Handler,
		},
		{
			MethodName: "Insert",
			Handler:    _MilvusService_Insert_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _MilvusService_Delete_Handler,
		},
		{
			MethodName: "Upsert",
			Handler:    _MilvusService_Upsert_Handler,
		},
		{
			MethodName: "Search",
			Handler:    _MilvusService_Search_Handler,
		},
		{
			MethodName: "HybridSearch",
			Handler:    _MilvusService_HybridSearch_Handler,
		},
		{
			MethodName: "Flush",
			Handler:    _MilvusService_Flush_Handler,
		},
		{
			MethodName: "Query",
			Handler:    _MilvusService_Query_Handler,
		},
		{
			MethodName: "CalcDistance",
			Handler:    _MilvusService_CalcDistance_Handler,
		},
		{
			MethodName: "FlushAll",
			Handler:    _MilvusService_FlushAll_Handler,
		},
		{
			MethodName: "GetFlushState",
			Handler:    _MilvusService_GetFlushState_Handler,
		},
		{
			MethodName: "GetFlushAllState",
			Handler:    _MilvusService_GetFlushAllState_Handler,
		},
		{
			MethodName: "GetPersistentSegmentInfo",
			Handler:    _MilvusService_GetPersistentSegmentInfo_Handler,
		},
		{
			MethodName: "GetQuerySegmentInfo",
			Handler:    _MilvusService_GetQuerySegmentInfo_Handler,
		},
		{
			MethodName: "GetReplicas",
			Handler:    _MilvusService_GetReplicas_Handler,
		},
		{
			MethodName: "Dummy",
			Handler:    _MilvusService_Dummy_Handler,
		},
		{
			MethodName: "RegisterLink",
			Handler:    _MilvusService_RegisterLink_Handler,
		},
		{
			MethodName: "GetMetrics",
			Handler:    _MilvusService_GetMetrics_Handler,
		},
		{
			MethodName: "GetComponentStates",
			Handler:    _MilvusService_GetComponentStates_Handler,
		},
		{
			MethodName: "LoadBalance",
			Handler:    _MilvusService_LoadBalance_Handler,
		},
		{
			MethodName: "GetCompactionState",
			Handler:    _MilvusService_GetCompactionState_Handler,
		},
		{
			MethodName: "ManualCompaction",
			Handler:    _MilvusService_ManualCompaction_Handler,
		},
		{
			MethodName: "GetCompactionStateWithPlans",
			Handler:    _MilvusService_GetCompactionStateWithPlans_Handler,
		},
		{
			MethodName: "Import",
			Handler:    _MilvusService_Import_Handler,
		},
		{
			MethodName: "GetImportState",
			Handler:    _MilvusService_GetImportState_Handler,
		},
		{
			MethodName: "ListImportTasks",
			Handler:    _MilvusService_ListImportTasks_Handler,
		},
		{
			MethodName: "CreateCredential",
			Handler:    _MilvusService_CreateCredential_Handler,
		},
		{
			MethodName: "UpdateCredential",
			Handler:    _MilvusService_UpdateCredential_Handler,
		},
		{
			MethodName: "DeleteCredential",
			Handler:    _MilvusService_DeleteCredential_Handler,
		},
		{
			MethodName: "ListCredUsers",
			Handler:    _MilvusService_ListCredUsers_Handler,
		},
		{
			MethodName: "CreateRole",
			Handler:    _MilvusService_CreateRole_Handler,
		},
		{
			MethodName: "DropRole",
			Handler:    _MilvusService_DropRole_Handler,
		},
		{
			MethodName: "OperateUserRole",
			Handler:    _MilvusService_OperateUserRole_Handler,
		},
		{
			MethodName: "SelectRole",
			Handler:    _MilvusService_SelectRole_Handler,
		},
		{
			MethodName: "SelectUser",
			Handler:    _MilvusService_SelectUser_Handler,
		},
		{
			MethodName: "OperatePrivilege",
			Handler:    _MilvusService_OperatePrivilege_Handler,
		},
		{
			MethodName: "SelectGrant",
			Handler:    _MilvusService_SelectGrant_Handler,
		},
		{
			MethodName: "GetVersion",
			Handler:    _MilvusService_GetVersion_Handler,
		},
		{
			MethodName: "CheckHealth",
			Handler:    _MilvusService_CheckHealth_Handler,
		},
		{
			MethodName: "CreateResourceGroup",
			Handler:    _MilvusService_CreateResourceGroup_Handler,
		},
		{
			MethodName: "DropResourceGroup",
			Handler:    _MilvusService_DropResourceGroup_Handler,
		},
		{
			MethodName: "UpdateResourceGroups",
			Handler:    _MilvusService_UpdateResourceGroups_Handler,
		},
		{
			MethodName: "TransferNode",
			Handler:    _MilvusService_TransferNode_Handler,
		},
		{
			MethodName: "TransferReplica",
			Handler:    _MilvusService_TransferReplica_Handler,
		},
		{
			MethodName: "ListResourceGroups",
			Handler:    _MilvusService_ListResourceGroups_Handler,
		},
		{
			MethodName: "DescribeResourceGroup",
			Handler:    _MilvusService_DescribeResourceGroup_Handler,
		},
		{
			MethodName: "RenameCollection",
			Handler:    _MilvusService_RenameCollection_Handler,
		},
		{
			MethodName: "ListIndexedSegment",
			Handler:    _MilvusService_ListIndexedSegment_Handler,
		},
		{
			MethodName: "DescribeSegmentIndexData",
			Handler:    _MilvusService_DescribeSegmentIndexData_Handler,
		},
		{
			MethodName: "Connect",
			Handler:    _MilvusService_Connect_Handler,
		},
		{
			MethodName: "AllocTimestamp",
			Handler:    _MilvusService_AllocTimestamp_Handler,
		},
		{
			MethodName: "CreateDatabase",
			Handler:    _MilvusService_CreateDatabase_Handler,
		},
		{
			MethodName: "DropDatabase",
			Handler:    _MilvusService_DropDatabase_Handler,
		},
		{
			MethodName: "ListDatabases",
			Handler:    _MilvusService_ListDatabases_Handler,
		},
		{
			MethodName: "AlterDatabase",
			Handler:    _MilvusService_AlterDatabase_Handler,
		},
		{
			MethodName: "DescribeDatabase",
			Handler:    _MilvusService_DescribeDatabase_Handler,
		},
		{
			MethodName: "ReplicateMessage",
			Handler:    _MilvusService_ReplicateMessage_Handler,
		},
		{
			MethodName: "BackupRBAC",
			Handler:    _MilvusService_BackupRBAC_Handler,
		},
		{
			MethodName: "RestoreRBAC",
			Handler:    _MilvusService_RestoreRBAC_Handler,
		},
		{
			MethodName: "CreatePrivilegeGroup",
			Handler:    _MilvusService_CreatePrivilegeGroup_Handler,
		},
		{
			MethodName: "DropPrivilegeGroup",
			Handler:    _MilvusService_DropPrivilegeGroup_Handler,
		},
		{
			MethodName: "ListPrivilegeGroups",
			Handler:    _MilvusService_ListPrivilegeGroups_Handler,
		},
		{
			MethodName: "OperatePrivilegeGroup",
			Handler:    _MilvusService_OperatePrivilegeGroup_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "milvus.proto",
}

const (
	ProxyService_RegisterLink_FullMethodName = "/milvus.proto.milvus.ProxyService/RegisterLink"
)

// ProxyServiceClient is the client API for ProxyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProxyServiceClient interface {
	RegisterLink(ctx context.Context, in *RegisterLinkRequest, opts ...grpc.CallOption) (*RegisterLinkResponse, error)
}

type proxyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProxyServiceClient(cc grpc.ClientConnInterface) ProxyServiceClient {
	return &proxyServiceClient{cc}
}

func (c *proxyServiceClient) RegisterLink(ctx context.Context, in *RegisterLinkRequest, opts ...grpc.CallOption) (*RegisterLinkResponse, error) {
	out := new(RegisterLinkResponse)
	err := c.cc.Invoke(ctx, ProxyService_RegisterLink_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProxyServiceServer is the server API for ProxyService service.
// All implementations should embed UnimplementedProxyServiceServer
// for forward compatibility
type ProxyServiceServer interface {
	RegisterLink(context.Context, *RegisterLinkRequest) (*RegisterLinkResponse, error)
}

// UnimplementedProxyServiceServer should be embedded to have forward compatible implementations.
type UnimplementedProxyServiceServer struct {
}

func (UnimplementedProxyServiceServer) RegisterLink(context.Context, *RegisterLinkRequest) (*RegisterLinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterLink not implemented")
}

// UnsafeProxyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProxyServiceServer will
// result in compilation errors.
type UnsafeProxyServiceServer interface {
	mustEmbedUnimplementedProxyServiceServer()
}

func RegisterProxyServiceServer(s grpc.ServiceRegistrar, srv ProxyServiceServer) {
	s.RegisterService(&ProxyService_ServiceDesc, srv)
}

func _ProxyService_RegisterLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterLinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProxyServiceServer).RegisterLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProxyService_RegisterLink_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProxyServiceServer).RegisterLink(ctx, req.(*RegisterLinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProxyService_ServiceDesc is the grpc.ServiceDesc for ProxyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProxyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "milvus.proto.milvus.ProxyService",
	HandlerType: (*ProxyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterLink",
			Handler:    _ProxyService_RegisterLink_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "milvus.proto",
}
